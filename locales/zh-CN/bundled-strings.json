{
  "AcceleratorRange.EightG": "加速器达到 8g 重力",
  "AcceleratorRange.EightG|block": "8g",
  "AcceleratorRange.FourG": "加速器达到 4g 重力",
  "AcceleratorRange.FourG|block": "4g",
  "AcceleratorRange.OneG": "加速器达到 1g 重力",
  "AcceleratorRange.OneG|block": "1g",
  "AcceleratorRange.TwoG": "加速器达到 2g 重力",
  "AcceleratorRange.TwoG|block": "2g",
  "AnalogInPin.analogRead": "将连接器值读取为模拟信号，即，0 至 1023 之间的值。",
  "AnalogInPin.analogRead|block": "模拟读取|引脚 %name",
  "AnalogOutPin.analogWrite": "以模拟信号设置连接器值。值必须在 0 至 1023 之间。",
  "AnalogOutPin.analogWrite|block": "向|引脚 %name|模拟写入 %value",
  "AnalogOutPin.analogWrite|param|value": "要写入引脚的值，介于“0”和“1023”之间。例如 1023、0",
  "ArcadePhysicsEngine": "一个物理引擎，可以执行简单的AABB边界框检查",
  "ArcadePhysicsEngine.overlaps": "返回 与给定精灵重叠的 精灵。如果type为非零，也按类型过滤。",
  "ArcadePhysicsEngine.overlaps|param|sprite": "@param 层",
  "Array": "在列表中添加、移除或者替换 项。",
  "Array.concat": "将值与另一个数组连接在一起。",
  "Array.concat|param|arr": "正在连接的另一个数组",
  "Array.every": "测试数组中的所有元素是否通过提供的函数实现的测试。",
  "Array.every|param|callbackfn": "一个可以接受两个参数的函数。every 方法将为数组中的每个元素调用一次 callbackfn 函数。",
  "Array.fill": "使用静态值从开始索引到结束索引填充数组的所有元素。结束索引不包括在内。",
  "Array.filter": "返回数组中满足回调函数中指定条件的元素。",
  "Array.filter|param|callbackfn": "一个可以接受两个参数的函数。filter 方法将为数组中的每个元素调用一次 callbackfn 函数。",
  "Array.find": "返回数组中第一个满足提供的测试函数的元素的值。否则返回undefined。",
  "Array.forEach": "在数组的每个元素上调用定义的回调函数。",
  "Array.forEach|param|callbackfn": "一个最多接受两个参数的函数。 forEach方法为数组中的每个元素调用callbackfn函数一次。",
  "Array.get": "获取特定索引处的值",
  "Array.get|param|index": "列表中以零为基准的项，例如 0",
  "Array.indexOf": "返回数组中第一次出现值的索引。",
  "Array.indexOf|block": "%list| 查找 %value 的索引",
  "Array.indexOf|param|fromIndex": "要开始搜索的数组索引。如果省略fromIndex，则搜索从索引0开始。",
  "Array.indexOf|param|item": "要在数组中定位的值。",
  "Array.insertAt": "将值插入特定索引处，将数组长度增加 1。",
  "Array.insertAt|block": "%list| 在 %index 处插入值 %value",
  "Array.insertAt|param|index": "列表中要插入值的以零为基础的位置，例如 0",
  "Array.isArray": "检查给定对象是否是数组。",
  "Array.join": "将数组的所有元素连接成一个字符串并返回该字符串。",
  "Array.join|param|sep": "字符串分隔符",
  "Array.length": "获取或设置数组的长度。此数字比数组中最后一个元素的索引值大1。",
  "Array.length|block": "%VALUE 的长度",
  "Array.map": "在数组的每个元素上调用定义的回调函数，并返回一个包含结果的数组。",
  "Array.map|param|callbackfn": "一个可以接受两个参数的函数。map 方法将为数组中的每个元素调用一次 callbackfn 函数。",
  "Array.pop": "从数组中移除最后一个元素并返回此元素。",
  "Array.pop|block": "获取并移除 %list 中的最后一个值",
  "Array.push": "向数组附加一个新元素。",
  "Array.push|block": "%list| 将值 %value| 添加到结尾",
  "Array.reduce": "为数组中的所有元素调用指定回调函数。回调函数的返回值是累积结果，并在回调函数的下一次调用中以参数形式提供。",
  "Array.reduce|param|callbackfn": "一个可以接受三个参数的函数。reduce 方法将为数组中的每个元素调用一次 callbackfn 函数。",
  "Array.reduce|param|initialValue": "开始累积的初始值。callbackfn 函数的第一次调用将以参数而不是数组值形式提供这个值。",
  "Array.removeAt": "移除特定索引处的元素。",
  "Array.removeAt|block": "%list| 移除 %index 处的值",
  "Array.removeElement": "移除第一次出现的对象。移除后返回 true。",
  "Array.reverse": "反转数组中的元素。第一个数组元素成为最后一个，最后一个数组元素成为第一个。",
  "Array.reverse|block": "反转 %list",
  "Array.set": "将值存储在特定索引处",
  "Array.set|param|index": "列表中要存储值的以零为基础的位置，例如 0",
  "Array.shift": "从数组中移除第一个元素并返回此元素。此方法将更改数组的长度。",
  "Array.shift|block": "获取并移除 %list 中的第一个值",
  "Array.slice": "返回一部分数组。",
  "Array.slice|param|end": "数组指定部分的结尾，例如 0",
  "Array.slice|param|start": "数组指定部分的开头，例如 0",
  "Array.some": "测试数组中是否至少有一个元素通过了由提供的函数实现的测试。",
  "Array.some|param|callbackfn": "一个最多接受两个参数的函数。 some方法为数组中的每个元素调用callbackfn函数一次。",
  "Array.sort": "排列数组的元素并返回数组。顺序不需要稳定。",
  "Array.splice": "删除数组中的元素。",
  "Array.splice|param|deleteCount": "要移除的元素个数，例如 0",
  "Array.splice|param|start": "数组中要开始移除元素的以零为基础的位置，例如 0",
  "Array.unshift": "向数组的开头添加一个元素并返回数组的新长度。",
  "Array.unshift|block": "%list| 在开头插入 %value|",
  "Array@type": "添加，删除和替换列表中的项。",
  "Array|block": "数组（Array）",
  "BackgroundAlignment.Bottom|block": "底部",
  "BackgroundAlignment.Center|block": "中心",
  "BackgroundAlignment.Left|block": "左",
  "BackgroundAlignment.Right|block": "右",
  "BackgroundAlignment.Top|block": "顶部",
  "BaudRate.BaudRate115200|block": "115200",
  "BaudRate.BaudRate1200|block": "1200",
  "BaudRate.BaudRate14400|block": "14400",
  "BaudRate.BaudRate19200|block": "19200",
  "BaudRate.BaudRate2400|block": "2400",
  "BaudRate.BaudRate28800|block": "28800",
  "BaudRate.BaudRate300|block": "300",
  "BaudRate.BaudRate31250|block": "31250",
  "BaudRate.BaudRate38400|block": "38400",
  "BaudRate.BaudRate4800|block": "4800",
  "BaudRate.BaudRate57600|block": "57600",
  "BaudRate.BaudRate9600|block": "9600",
  "BeatFraction.Breve|block": "4",
  "BeatFraction.Double|block": "2",
  "BeatFraction.Eighth|block": "1/8",
  "BeatFraction.Half|block": "1/2",
  "BeatFraction.Quarter|block": "1/4",
  "BeatFraction.Sixteenth|block": "1/16",
  "BeatFraction.Whole|block": "1",
  "Boolean.toString": "返回对象的字符串表示。",
  "Buffer.fill": "具有给定值的缓冲器填充（片段）。",
  "Buffer.getNumber": "从缓冲器读取指定格式的数字。",
  "Buffer.length": "返回缓冲器对象的长度。",
  "Buffer.rotate": "将缓冲区旋转到位。",
  "Buffer.rotate|param|length": "缓冲器中的元素个数。如果为负，长度设置为缓冲器长度减去开始。例如 -1",
  "Buffer.rotate|param|offset": "要偏移的字节数；使用负值右移",
  "Buffer.rotate|param|start": "在缓冲器中开始偏移。默认值为 0。",
  "Buffer.setNumber": "在缓冲器中写入指定格式的数字。",
  "Buffer.shift": "在原处移动缓冲器，不填充。",
  "Buffer.shift|param|length": "缓冲器中的元素个数。如果为负，长度设置为缓冲器长度减去开始。例如 -1",
  "Buffer.shift|param|offset": "要偏移的字节数；使用负值右移",
  "Buffer.shift|param|start": "在缓冲器中开始偏移。默认值为 0。",
  "Buffer.slice": "返回缓冲器片段的副本。",
  "Buffer.toHex": "将缓冲区转换为十六进制表示形式。",
  "Buffer.toString": "将缓冲区转换为假定UTF8编码",
  "Buffer.write": "在当前缓冲器“dstOffset”处写入“src”内容。",
  "Button.id": "获取buton的组件标识符",
  "Button.isPressed": "检查按键是否被按下",
  "Button.isPressed|block": "%button|按下",
  "Button.onEvent": "当按键（A、B或者A+B）按下，或者双击时等等，执行某种操作",
  "Button.onEvent|block": "当 %button|%event",
  "Button.onEvent|param|body": "当事件触发时，运行代码",
  "Button.wasPressed": "检查自从上次查看后该按钮是否被再次按压。",
  "Button.wasPressed|block": "%button|已经按下",
  "ButtonEvent": "按钮上的用户交互",
  "ButtonEvent.Click|block": "单击",
  "ButtonEvent.Down|block": "下",
  "ButtonEvent.LongClick|block": "长按",
  "ButtonEvent.Up|block": "上",
  "CollisionDirection.Bottom|block": "底部",
  "CollisionDirection.Left|block": "左",
  "CollisionDirection.Right|block": "右",
  "CollisionDirection.Top|block": "顶部",
  "ColorHues.Blue|block": "蓝色",
  "ColorHues.Green|block": "绿色",
  "ColorHues.Magenta|block": "洋红色",
  "ColorHues.Orange|block": "橙色",
  "ColorHues.Pink|block": "粉红色",
  "ColorHues.Purple|block": "紫色",
  "ColorHues.Red|block": "红色",
  "ColorHues.Yellow|block": "黄色",
  "Colors.Black|block": "黑色",
  "Colors.Blue|block": "蓝色",
  "Colors.Green|block": "绿色",
  "Colors.Indigo|block": "靛蓝色",
  "Colors.Pink|block": "粉红色",
  "Colors.Purple|block": "紫色",
  "Colors.Red|block": "红色",
  "Colors.Violet|block": "紫罗兰色",
  "Colors.White|block": "白色",
  "Colors.Yellow|block": "黄色",
  "ControllerButton.A|block": "A",
  "ControllerButton.B|block": "B",
  "ControllerButton.Down|block": "下",
  "ControllerButton.Left|block": "左",
  "ControllerButton.Right|block": "右",
  "ControllerButton.Up|block": "上",
  "ControllerButtonEvent.Pressed|block": "按下",
  "ControllerButtonEvent.Released|block": "松开",
  "ControllerButtonEvent.Repeated|block": "repeat",
  "ControllerDimension.Strength|block": "强度",
  "ControllerDimension.X|block": "x",
  "ControllerDimension.Y|block": "y",
  "ControllerDimension.Z|block": "z",
  "ControllerEvent.Connected|block": "连接上",
  "ControllerEvent.Disconnected|block": "断开",
  "ControllerGesture.ScreenDown": "屏幕朝上且开发板水平时引发",
  "ControllerGesture.ScreenDown|block": "屏幕朝下",
  "ControllerGesture.ScreenUp": "当屏幕朝上时触发",
  "ControllerGesture.ScreenUp|block": "屏幕朝上",
  "ControllerGesture.Shake": "摇动手势",
  "ControllerGesture.Shake|block": "振动",
  "ControllerGesture.TiltDown": "当设备向下倾斜时触发",
  "ControllerGesture.TiltDown|block": "向下倾斜",
  "ControllerGesture.TiltLeft": "屏幕朝左时引发",
  "ControllerGesture.TiltLeft|block": "向左倾斜",
  "ControllerGesture.TiltRight": "屏幕朝右时引发",
  "ControllerGesture.TiltRight|block": "向右倾斜",
  "ControllerGesture.TiltUp": "当设备向上倾斜时触发",
  "ControllerGesture.TiltUp|block": "向上倾斜",
  "ControllerLightCondition.Bright|block": "亮",
  "ControllerLightCondition.Dark|block": "暗",
  "Corgio": "小狗平台游戏",
  "Corgio.addToScript": "为角色添加新短语",
  "Corgio.addToScript|block": "教%corgio(myCorg) 单词 %input",
  "Corgio.addToScript|param|input": "要添加到脚本的短语，例如：“bark”",
  "Corgio.bark": "让角色随机说出剧本中的一个短语",
  "Corgio.bark|block": "让 %corgio(myCorg) 吠!",
  "Corgio.decelerationRate|block": "水平移动移动减慢",
  "Corgio.follow": "将相机设置为水平跟随corgio，同时保持屏幕垂直居中。",
  "Corgio.follow|block": "使镜头跟随 %corgio(myCorg) 左右 || %on=toggleOnOff",
  "Corgio.gravity|block": "重力",
  "Corgio.horizontalMovement": "使角色按左右箭头键指示的方向移动。",
  "Corgio.horizontalMovement|block": "用方向键让 %corgio(myCorg) 左右移动 || %on=toggleOnOff",
  "Corgio.jumpVelocity|block": "跳跃速度",
  "Corgio.maxJump|block": "在一行中最大跳跃数",
  "Corgio.maxMoveVelocity|block": "水平速度",
  "Corgio.sprite": "获取Corgio的精灵",
  "Corgio.sprite|block": "%corgio(myCorg) 精灵",
  "Corgio.updateSprite": "移动时让角色改变精灵。",
  "Corgio.updateSprite|block": "改变背景当 %corgio(myCorg) 正在移动 || %on=toggleOnOff",
  "Corgio.verticalMovement": "按下向上箭头键使角色跳跃，落下时抓住墙壁。",
  "Corgio.verticalMovement|block": "让 %corgio(myCorg) 跳跃当向上箭头按下 || %on=toggleOnOff",
  "Dart": "飞镖",
  "Dart.angleRate|block": "角度调整率",
  "Dart.angle|block": "角度",
  "Dart.controlWithArrowKeys": "设置是否使用箭头键控制飞镖;左和右\n调整角度, 上下增加/减少功率",
  "Dart.controlWithArrowKeys|block": "控制 %dart(myDart) 以箭头键 || %on=开关OnOff",
  "Dart.controlWithArrowKeys|param|on": "是否打开或关闭此功能, 例如: true",
  "Dart.gravity|block": "重力",
  "Dart.iter|block": "跟踪时间 (秒)",
  "Dart.powerRate|block": "风",
  "Dart.pow|block": "电源",
  "Dart.setTrace": "设置是否显示估计路径的跟踪",
  "Dart.setTrace|block": "跟踪 %dart(myDart) 路径估计 || %on=开关OnOff",
  "Dart.setTrace|param|on": "是否打开或关闭此功能, 例如: true",
  "Dart.sprite": "获取飞镖的精灵",
  "Dart.sprite|block": "%dart(myDart) 精灵",
  "Dart.stopDart": "在当前位置停止飞镖",
  "Dart.stopDart|block": "停止 %dart(myDart)",
  "Dart.throwDart": "使用当前设置投掷飞镖",
  "Dart.throwDart|block": "扔 %dart(myDart)",
  "Dart.traceColor|block": "跟踪颜色",
  "Dart.updateBackground": "将背景图像更新到新图像, 以便飞镖可以继续跟踪",
  "Dart.updateBackground|block": "改变 %dart(myDart) 背景图像以 %img=background_image_picker",
  "Dart.wind|block": "风",
  "Delimiters.Colon|block": ":",
  "Delimiters.Comma|block": ",",
  "Delimiters.Dollar|block": "$",
  "Delimiters.Fullstop|block": ".",
  "Delimiters.Hash|block": "#",
  "Delimiters.NewLine|block": "换行",
  "Delimiters.Pipe|block": "管道",
  "Delimiters.SemiColumn|block": ";",
  "Delimiters.Space|block": "空格",
  "Delimiters.Tab|block": "tab",
  "DialogLayout.Bottom|block": "底部",
  "DialogLayout.Center|block": "中心",
  "DialogLayout.Full|block": "全屏",
  "DialogLayout.Left|block": "左",
  "DialogLayout.Right|block": "右",
  "DialogLayout.Top|block": "顶部",
  "DigitCounter.addDigit": "在计数器上添加一个数字",
  "DigitCounter.setDigitColor": "设置计数器显示数字颜色",
  "DigitCounter.setDigitColor|block": "将%sevenseg（myCounter）显示颜色设为 %color=colorindexpicker",
  "DigitCounter.setDigitColor|param|color": "数字显示，例如 2",
  "DigitCounter.x@set|block": "x",
  "DigitCounter.x|block": "x",
  "DigitCounter.y@set|block": "y",
  "DigitCounter.y|block": "y",
  "DigitRadix.Alpha|block": "透明度",
  "DigitRadix.Decimal|block": "十进制",
  "DigitRadix.Hex|block": "十六进制",
  "DigitRadix.Octal|block": "八进制",
  "DigitalInOutPin.digitalRead": "将引脚或连接器值读取为 0 或 1",
  "DigitalInOutPin.digitalRead|block": "数字读取引脚 %name",
  "DigitalInOutPin.digitalWrite": "将引脚或连接器值设置为 0 或 1。",
  "DigitalInOutPin.digitalWrite|block": "数字写|引脚 %name|为 %value=toggleHighLow",
  "DigitalInOutPin.digitalWrite|param|value": "在引脚上设置的值",
  "DigitalInOutPin.onEvent": "注册代码以在发生引脚事件时运行。",
  "DigitalInOutPin.onEvent|block": "当|引脚 %pin|%event",
  "DigitalInOutPin.onPulsed": "将此引脚设为数字输入，并创建事件，其中时间戳为此引脚为“高”或“低”的持续时间",
  "DigitalInOutPin.onPulsed|block": "当引脚 %pin|脉冲为 %pulse",
  "DigitalInOutPin.pulseIn": "以微秒为单位返回脉冲的持续时间",
  "DigitalInOutPin.pulseIn|block": "脉冲输入 (µs)|引脚 %name|电平 %high||超时 %maxDuration (us)",
  "DigitalInOutPin.pulseIn|param|value": "脉冲值（默认为高）",
  "DigitalInOutPin.pushButton": "获取给定引脚的按钮（连接到GND）",
  "DigitalInOutPin.setPull": "设置此引脚的拉的方向（上拉、下拉、或者不设置）。",
  "DigitalInOutPin.setPull|block": "设置拉|引脚 %pin|为 %pull",
  "DigitalInOutPin.setPull|param|pull": "其中一种mbed拉配置：PullUp，PullDown，PullNone",
  "Dimension.Strength|block": "强度",
  "Dimension.X|block": "x",
  "Dimension.Y|block": "y",
  "Dimension.Z|block": "z",
  "FlipOption.FlipXY|block": "翻转 x+y",
  "FlipOption.FlipX|block": "翻转 x",
  "FlipOption.FlipY|block": "翻转 y",
  "FlipOption.None|block": "无",
  "Gesture.EightG": "检测到 8G 振动时触发",
  "Gesture.EightG|block": "8g",
  "Gesture.FaceDown": "屏幕朝上且开发板水平时触发",
  "Gesture.FaceDown|block": "正面朝下",
  "Gesture.FaceUp": "当屏幕朝上触发",
  "Gesture.FaceUp|block": "正面朝上",
  "Gesture.FreeFall": "开发板掉落时触发！",
  "Gesture.FreeFall|block": "自由落体",
  "Gesture.Shake": "振动时触发",
  "Gesture.Shake|block": "振动",
  "Gesture.SixG": "检测到 6G 振动时触发",
  "Gesture.SixG|block": "6g",
  "Gesture.ThreeG": "检测 3G 振动时触发",
  "Gesture.ThreeG|block": "3g",
  "Gesture.TiltDown": "当设备向下倾斜时触发",
  "Gesture.TiltDown|block": "向下倾斜",
  "Gesture.TiltLeft": "屏幕朝左时触发",
  "Gesture.TiltLeft|block": "向左倾斜",
  "Gesture.TiltRight": "屏幕朝右时触发",
  "Gesture.TiltRight|block": "向右倾斜",
  "Gesture.TiltUp": "当设备向上倾斜时触发",
  "Gesture.TiltUp|block": "向上倾斜",
  "I2C.readBuffer": "从7位I2C`地址`读取`size`字节。",
  "I2C.writeBuffer": "将字节写入7位I2C`地址`。",
  "Image.clone": "返回当前图像的副本\n\n返回当前图像的副本",
  "Image.clone|block": "克隆 %picture=variables_get",
  "Image.copyFrom": "设置当前图像中与其他图像的所有像素，该图像必须具有相同的大小和 bpp。",
  "Image.doubled": "在两个方向上拉伸图像100％",
  "Image.doubledX": "水平拉伸图像100％",
  "Image.doubledY": "垂直拉伸图像100％",
  "Image.drawCircle": "绘制圆形",
  "Image.drawIcon": "用给定颜色绘制图标（单色图像）",
  "Image.drawImage": "在当前图像上绘制给定图像",
  "Image.drawLine": "画一条线\n\n画一条线",
  "Image.drawLine|block": "画线 %picture=variables_get 从 x %x0 y %y0 到 x %x1 y %y1 %c=colorindexpicker",
  "Image.drawRect": "绘制一个空矩形\n\n绘制一个空矩形",
  "Image.drawRect|block": "画矩形 %picture=variables_get 起点 x %x y %y 宽 %w 高 %h %c=colorindexpicker",
  "Image.drawTransparentImage": "在当前图像上绘制具有透明背景的给定图像",
  "Image.fill": "用给定的颜色填充整个图像\n\n用给定的颜色填充整个图像",
  "Image.fillCircle": "填充圆",
  "Image.fillRect": "填充矩形\n\n填充矩形",
  "Image.fillRect|block": "填充矩形 %picture=variables_get 起点 x %x y %y 宽 %w 高 %h %c=colorindexpicker",
  "Image.fill|block": "填充 %picture=variables_get 颜色 %c=colorindexpicker",
  "Image.flipX": "在当前图像中水平翻转 (镜像) 像素\n\n在当前图像中水平翻转 (镜像) 像素",
  "Image.flipX|block": "水平翻转 %picture=variables_get",
  "Image.flipY": "垂直翻转当前图像中的像素 (镜像)\n\n垂直翻转当前图像中的像素 (镜像)",
  "Image.flipY|block": "垂直翻转 %picture=variables_get",
  "Image.getPixel": "获取像素颜色\n\n获取像素颜色",
  "Image.getPixel|block": "%picture=variables_get 取颜色 x %x y %y",
  "Image.getRows": "将像素行从图像复制到缓冲区（每像素8位）。",
  "Image.height": "获取图像高度",
  "Image.mapRect": "替换矩形中的颜色",
  "Image.overlapsWith": "检查当前图像是否与另一个图像 \"碰撞\"",
  "Image.replace": "将图像中的一种颜色替换为另一种颜色\n\n将图像中的一种颜色替换为另一种颜色",
  "Image.replace|block": "改变颜色 %picture=variables_get 从 %from=colorindexpicker 为 %to=colorindexpicker",
  "Image.rotated": "返回顺时针旋转-90、0、90、180、270度的图像",
  "Image.scroll": "图像中的每个像素都由 (dx, dy) 移动\n\n图像中的每个像素都由 (dx, dy) 移动",
  "Image.setPixel": "设置像素颜色\n\n设置像素颜色",
  "Image.setPixel|block": "设置 %picture=variables_get 颜色 x %x y %y 为 %c=colorindexpicker",
  "Image.setRows": "将像素行从缓冲区复制到图像。",
  "Image.transposed": "返回转置图像（交换X / Y）",
  "Image.width": "获取图像宽度",
  "JDButtonEvent.Click|block": "单击",
  "JDButtonEvent.Down|block": "下",
  "JDButtonEvent.LongClick|block": "长按",
  "JDButtonEvent.Up|block": "上",
  "JDConsoleMode.Broadcast|block": "广播",
  "JDConsoleMode.Listen|block": "监听",
  "JDConsoleMode.Off|block": "关闭",
  "JDDimension.Strength|block": "强度",
  "JDDimension.X|block": "x",
  "JDDimension.Y|block": "y",
  "JDDimension.Z|block": "z",
  "JDDriverEvent.Connected|block": "已连接",
  "JDDriverEvent.Disconnected|block": "断开",
  "JDDriverEvent.DriverError|block": "驱动错误",
  "JDDriverEvent.Paired|block": "已配对",
  "JDDriverEvent.PairingRefused|block": "拒绝配对",
  "JDDriverEvent.PairingResponse|block": "配对响应",
  "JDDriverEvent.Unpaired|block": "未配对",
  "JDEvent.BusConnected|block": "总线连接",
  "JDEvent.BusDisconnected|block": "总线断开连接",
  "JDEvent.DriverChanged|block": "驱动已改变",
  "JDGamepadButton.Down|block": "下",
  "JDGamepadButton.LeftBumper|block": "左按键",
  "JDGamepadButton.LeftStick|block": "左杆",
  "JDGamepadButton.LeftTrigger|block": "左触发器",
  "JDGamepadButton.Left|block": "左",
  "JDGamepadButton.RightBumper|block": "右按键",
  "JDGamepadButton.RightStick|block": "右杆",
  "JDGamepadButton.RightTrigger|block": "右触发器",
  "JDGamepadButton.Right|block": "右",
  "JDGamepadButton.Select|block": "选择",
  "JDGamepadButton.Start|block": "开始",
  "JDGamepadButton.Up|block": "上",
  "JDGesture.FaceDown": "屏幕朝上且开发板水平时引发",
  "JDGesture.FaceDown|block": "正面朝下",
  "JDGesture.FaceUp": "当屏幕朝上时触发",
  "JDGesture.FaceUp|block": "正面朝上",
  "JDGesture.FreeFall": "开发板掉落时引发！",
  "JDGesture.FreeFall|block": "自由落体",
  "JDGesture.Shake": "振动时引发",
  "JDGesture.Shake|block": "振动",
  "JDGesture.TiltDown": "当设备向下倾斜时触发",
  "JDGesture.TiltDown|block": "向下倾斜",
  "JDGesture.TiltLeft": "屏幕朝左时引发",
  "JDGesture.TiltLeft|block": "向左倾斜",
  "JDGesture.TiltRight": "屏幕朝右时引发",
  "JDGesture.TiltRight|block": "向右倾斜",
  "JDGesture.TiltUp": "当设备向上倾斜时触发",
  "JDGesture.TiltUp|block": "向上倾斜",
  "JDKeyboardFunctionKey.DeleteForward|block": "删除",
  "JDKeyboardFunctionKey.DownArrow|block": "下箭头",
  "JDKeyboardFunctionKey.End|block": "end",
  "JDKeyboardFunctionKey.F10Key|block": "F0",
  "JDKeyboardFunctionKey.F11Key|block": "F11",
  "JDKeyboardFunctionKey.F12Key|block": "F12",
  "JDKeyboardFunctionKey.F1Key|block": "F1",
  "JDKeyboardFunctionKey.F2Key|block": "F2",
  "JDKeyboardFunctionKey.F3Key|block": "F3",
  "JDKeyboardFunctionKey.F4Key|block": "F4",
  "JDKeyboardFunctionKey.F5Key|block": "F5",
  "JDKeyboardFunctionKey.F6Key|block": "F6",
  "JDKeyboardFunctionKey.F7Key|block": "F7",
  "JDKeyboardFunctionKey.F8Key|block": "F8",
  "JDKeyboardFunctionKey.F9Key|block": "F9",
  "JDKeyboardFunctionKey.Home|block": "首页",
  "JDKeyboardFunctionKey.Insert|block": "插入",
  "JDKeyboardFunctionKey.LeftArrow|block": "左箭头",
  "JDKeyboardFunctionKey.PageDown|block": "向下翻页",
  "JDKeyboardFunctionKey.PageUp|block": "向上翻页",
  "JDKeyboardFunctionKey.Pause|block": "暂停",
  "JDKeyboardFunctionKey.PrintScreen|block": "打印屏幕",
  "JDKeyboardFunctionKey.RightArrow|block": "右箭头",
  "JDKeyboardFunctionKey.ScrollLock|block": "滚动锁",
  "JDKeyboardFunctionKey.UpArrow|block": "上箭头",
  "JDKeyboardKeyEvent.Down|block": "下",
  "JDKeyboardKeyEvent.Press|block": "按下",
  "JDKeyboardKeyEvent.Up|block": "上",
  "JDKeyboardMediaKey.Calculator|block": "计算器",
  "JDKeyboardMediaKey.Mail|block": "邮件",
  "JDKeyboardMediaKey.Mute|block": "静音",
  "JDKeyboardMediaKey.NextTrack|block": "下一首",
  "JDKeyboardMediaKey.PlayPause|block": "播放暂停",
  "JDKeyboardMediaKey.PreviousTrack|block": "上一曲",
  "JDKeyboardMediaKey.Stop|block": "停止",
  "JDKeyboardMediaKey.VolumeDown|block": "调低音量",
  "JDKeyboardMediaKey.VolumeUp|block": "调高音量",
  "JDKeyboardMediaKey.WebBack|block": "网页回放",
  "JDKeyboardMediaKey.WebFavourites|block": "网络收藏",
  "JDKeyboardMediaKey.WebForward|block": "网站转发",
  "JDKeyboardMediaKey.WebHome|block": "网页主页",
  "JDKeyboardMediaKey.WebRefresh|block": "网页刷新",
  "JDKeyboardMediaKey.WebSearch|block": "网页搜索",
  "JDKeyboardMediaKey.WebStop|block": "网页停止",
  "JDLightAnimation.ColorWipe|block": "清除颜色",
  "JDLightAnimation.Comet|block": "彗星",
  "JDLightAnimation.Rainbow|block": "彩虹",
  "JDLightAnimation.Sparkle|block": "火花",
  "JDMouseButton.Left|block": "左",
  "JDMouseButton.Middle|block": "中间",
  "JDMouseButton.Right|block": "右",
  "JDSwitchDirection.Left|block": "左",
  "JDSwitchDirection.Right|block": "右",
  "JDTemperatureCondition.Cold|block": "冷",
  "JDTemperatureCondition.Hot|block": "热",
  "JDTemperatureUnit.Celsius|block": "°C",
  "JDTemperatureUnit.Fahrenheit|block": "°F",
  "JSON.parse": "将JavaScript Object Notation（JSON）字符串转换为对象。",
  "JSON.stringify": "将JavaScript值转换为JavaScript Object Notation（JSON）字符串。",
  "JSON.stringify|param|indent": "将缩进，空格和换行符添加到返回值JSON文本中，以便于阅读。",
  "JSON.stringify|param|replacer": "不支持;使用null。",
  "JSON.stringify|param|value": "要转换的JavaScript值，通常是对象或数组。",
  "JSON|block": "JSON",
  "JacDacDriverStatus.device": "返回 JDDevievie 实例",
  "JacDacDriverStatus.id": "获取事件的设备ID。",
  "JacDacDriverStatus.isConnected": "检查驱动程序是否已连接。",
  "JacDacDriverStatus.isPairedInstanceAddress": "如果配对, 则为已配对的实例地址",
  "JacDacDriverStatus.setBridge": "设置驱动器为桥接",
  "JacDacDriverStatus.setError": "设置设备上的错误状态",
  "JacdacLightCondition.Bright|block": "亮",
  "JacdacLightCondition.Dark|block": "暗",
  "LightAnimation.ColorWipe|block": "清除颜色",
  "LightAnimation.Comet|block": "彗星",
  "LightAnimation.Rainbow|block": "彩虹",
  "LightAnimation.RunningLights|block": "跑马灯",
  "LightAnimation.Sparkle|block": "火花",
  "LightAnimation.TheaterChase|block": "剧院追逐",
  "LightCondition.Bright|block": "亮",
  "LightCondition.Dark|block": "暗",
  "LightMove.Rotate|block": "旋转",
  "Math": "数字的更复杂运算。",
  "Math.FastRandom": "快速，16位，可播种（伪）随机发生器。",
  "Math.FastRandom.next": "@returns 0x0001和0xFFFF之间的 下一个随机数",
  "Math.FastRandom.percentChance": "@returns 返回布尔值，根据给定百分比为true或false",
  "Math.FastRandom.percentChance|param|percent": "返回值从0到100的真实百分比",
  "Math.FastRandom.pickRandom": "返回给定列表中的随机元素",
  "Math.FastRandom.pickRandom|param|list": "选择元素的列表",
  "Math.FastRandom.randomBool": "@returns 返回随机布尔值",
  "Math.FastRandom.randomRange": "@returns 最小值和最大值 (包括) 之间的随机值。如果最小值大于或等于最大值, 则返回最小值。",
  "Math.FastRandom.randomRange|param|max": "生成的最大值",
  "Math.FastRandom.randomRange|param|min": "生成的最小值",
  "Math.FastRandom.reset": "将状态重置为当前种子",
  "Math.abs": "返回一个数字 （无论是正数还是负数） 的绝对值。\n例如，-5 的绝对值与 5 的绝对值相同。",
  "Math.abs|param|x": "需要绝对值的数字表达式。",
  "Math.acos": "返回一个数字的反余弦（以弧度为单位）",
  "Math.acos|param|x": "数字",
  "Math.asin": "返回一个数字的反正弦（以弧度为单位）",
  "Math.asin|param|x": "数字",
  "Math.atan": "返回一个数字的反正切（以弧度为单位）",
  "Math.atan2": "返回其参数商的反正切。",
  "Math.atan2|param|x": "数字",
  "Math.atan2|param|y": "数字",
  "Math.atan|param|x": "数字",
  "Math.ceil": "返回大于或等于其数值参数的最小数。",
  "Math.ceil|param|x": "数字表达式。",
  "Math.constrain": "约束一个数字在一个范围内",
  "Math.constrain|block": "限制 %value|介于 %low|and %high",
  "Math.cos": "返回一个数字的余弦。",
  "Math.cos|param|x": "以弧度为单位的角度",
  "Math.exp": "返回“e^x”。",
  "Math.exp|param|x": "数字",
  "Math.floor": "返回小于或等于其数值参数的最大数。",
  "Math.floor|param|x": "数字表达式。",
  "Math.icos": "返回输入角度的余弦值。这是一个8位近似值。",
  "Math.icos|param|theta": "输入角度从0到255",
  "Math.idiv": "返回两个数字 32 位有符号整数除法的值。",
  "Math.idiv|param|x": "第一个数字",
  "Math.idiv|param|y": "第二个数字",
  "Math.imul": "返回两个数字 32 位有符号整数乘法的值。",
  "Math.imul|param|x": "第一个数字",
  "Math.imul|param|y": "第二个数字",
  "Math.isin": "返回输入角度的正弦值。这是一个8位近似值。",
  "Math.isin|param|theta": "输入角度从0到255",
  "Math.log": "返回一个数字的自然对数（底数为 e）。",
  "Math.log|param|x": "数字",
  "Math.map": "将数字从一个范围重映射到另一个范围。即，“自低”值会映射到“至低”值，“自高”值会映射到“至高”值，以前范围内的值会重映射到新的范围。",
  "Math.map|block": "映射 %value|从低 %fromLow|从高 %fromHigh|至低 %toLow|至高 %toHigh",
  "Math.map|param|fromHigh": "值当前范围的上限，例如 1023",
  "Math.map|param|fromLow": "值当前范围的下限",
  "Math.map|param|toHigh": "值目标范围的上限，例如 4",
  "Math.map|param|toLow": "值目标范围的下限",
  "Math.map|param|value": "要在范围内映射的值",
  "Math.max": "返回两个数值表达式中较大的一个。",
  "Math.min": "返回两个数值表达式中较小的一个。",
  "Math.percentChance": "返回一个随机布尔值，该布尔值为给定的时间百分比。",
  "Math.percentChance|block": "%percentage|\\\\% 几率",
  "Math.percentChance|param|percentage": "返回值从0到100的真实百分比",
  "Math.pickRandom": "返回给定列表中的随机元素",
  "Math.pickRandom|param|list": "选择元素的列表",
  "Math.pow": "返回底数表达式的指定次幂的值。",
  "Math.pow|param|x": "表达式的底数值。",
  "Math.pow|param|y": "表达式的指数值。",
  "Math.random": "返回 0 到“限值”之间的随机数。",
  "Math.randomRange": "返回一个介于最小值（含）和最大值（含）之间的伪随机数。\n如果两个数字都是整型，则结果是整型。",
  "Math.randomRange|block": "选取随机数，范围为 %min|至 %limit",
  "Math.randomRange|param|max": "范围上限，例如 10",
  "Math.randomRange|param|min": "范围下限，例如 0",
  "Math.round": "将提供的数值表达式舍入到最近的数字。",
  "Math.roundWithPrecision": "将``x``舍入到具有给定数量的``digits``的数字",
  "Math.roundWithPrecision|param|digits": "结果数字的数量",
  "Math.roundWithPrecision|param|x": "要舍入的数字",
  "Math.round|param|x": "要舍入到最近数字的值。",
  "Math.sign": "返回 x 的符号，指示 x 为正数、负数还是零。",
  "Math.sign|param|x": "要测试的数字表达式",
  "Math.sin": "返回一个数字的正弦。",
  "Math.sin|param|x": "以弧度为单位的角度",
  "Math.sqrt": "返回一个数字的平方根。",
  "Math.sqrt|param|x": "数字表达式。",
  "Math.tan": "返回一个数字的正切。",
  "Math.tan|param|x": "以弧度为单位的角度",
  "Math.trunc": "返回去掉小数位的数字。",
  "Math.trunc|param|x": "数字表达式。",
  "Math|block": "数学",
  "Note.CSharp3|block": "C#3",
  "Note.CSharp4|block": "C#4",
  "Note.CSharp5|block": "C#5",
  "Note.CSharp|block": "C#",
  "Note.FSharp3|block": "F#3",
  "Note.FSharp4|block": "F#4",
  "Note.FSharp5|block": "F#5",
  "Note.FSharp|block": "F#",
  "Note.GSharp3|block": "G#3",
  "Note.GSharp4|block": "G#4",
  "Note.GSharp5|block": "G#5",
  "Note.GSharp|block": "G#",
  "Number.toString": "返回一个数字的字符串表示。",
  "Number|block": "数字",
  "Object.keys": "返回对象中的字段名称。",
  "Object|block": "对象",
  "PhotonMode.Eraser|block": "擦除",
  "PhotonMode.Off|block": "关闭",
  "PhotonMode.PenDown|block": "落笔",
  "PhotonMode.PenUp|block": "抬笔",
  "PhysicsEngine.addSprite": "将精灵添加到物理中",
  "PhysicsEngine.collisions": "应用碰撞",
  "PhysicsEngine.move": "启动物理",
  "PinEvent.Fall|block": "坠落",
  "PinEvent.PulseHigh|block": "上升沿",
  "PinEvent.PulseLow|block": "下降沿",
  "PinEvent.Rise|block": "上升沿",
  "PinPullMode.PullDown|block": "下",
  "PinPullMode.PullNone|block": "无",
  "PinPullMode.PullUp|block": "上",
  "PulseValue.High|block": "高",
  "PulseValue.Low|block": "低",
  "PwmOnlyPin.analogSetPeriod": "设置模拟输出的脉冲宽度调制（PWM）周期。周期为\n**微秒**或“1/1000”毫秒。 \n如果此引脚未配置为模拟输出（使用“模拟写入引脚”），则操作无效。",
  "PwmOnlyPin.analogSetPeriod|block": "PWM周期|引脚 %pin|为 (µs)%period",
  "PwmOnlyPin.servoSetPulse": "设置PWM模拟输出的引脚，使周期为20 ms，并设置脉冲宽度。 \n脉冲宽度基于给定的值**微秒**或“1/1000”毫秒。",
  "PwmOnlyPin.servoSetPulse|block": "舵机脉冲|引脚 %value|为 (µs) %duration",
  "PwmOnlyPin.servoSetPulse|param|duration": "脉冲持续时间，单位为微秒，例如 1500",
  "PwmOnlyPin.servoWrite": "向伺服器写入一个值以控制轴的旋转。在标准伺服系统上，这将设置轴的角度（以度为单位），将轴移动到该方向。在连续\n旋转伺服时（360度舵机），这将设置伺服的速度（“0”在一个方向上全速，“180”在另一个方向全速，并且值接近“90” “停止”。",
  "PwmOnlyPin.servoWrite|block": "舵机角度|引脚 %name|为 %value=protractorPicker",
  "PwmOnlyPin.servoWrite|param|value": "角度或转速",
  "Rotation.Pitch|block": "旋转",
  "Rotation.Roll|block": "横滚",
  "SPI.setFrequency": "设置SPI时钟频率",
  "SPI.setMode": "设置SPI总线模式",
  "SPI.transfer": "通过SPI总线传输缓冲区",
  "SPI.write": "写入SPI总线",
  "ScreenImage.brightness": "获取当前屏幕背光亮度（0-100）",
  "SegmentCharacter.A|block": "A",
  "SegmentCharacter.B|block": "B",
  "SegmentCharacter.C|block": "C",
  "SegmentCharacter.D|block": "D",
  "SegmentCharacter.E|block": "E",
  "SegmentCharacter.F|block": "F",
  "SegmentScale.Full|block": "完全",
  "SegmentScale.Half|block": "一半",
  "SegmentStyle.Blank|block": "空白",
  "SegmentStyle.Medium|block": "正常",
  "SegmentStyle.Narrow|block": "窄",
  "SegmentStyle.Thick|block": "厚",
  "SegmentStyle.Thin|block": "薄",
  "SerialDevice.onDelimiterReceived": "收到分隔符时注册代码",
  "SerialDevice.onEvent": "在发生串行事件时注册代码",
  "SerialDevice.read": "从串行接收缓冲区读取单个字节。如果出现错误, 则为负, 如果没有数据, 则为0。",
  "SerialDevice.readBuffer": "将缓冲的接收数据作为缓冲区读取",
  "SerialDevice.setBaudRate": "设置串口的波特率",
  "SerialDevice.setRxBufferSize": "设置RX缓冲区的大小（以字节为单位）",
  "SerialDevice.setTxBufferSize": "设置TX缓冲区的大小（以字节为单位）",
  "SerialDevice.writeBuffer": "通过串行连接发送缓冲区。",
  "SerialEvent.DataReceived|block": "收到的数据",
  "SerialEvent.RxBufferFull|block": "rx 缓冲区已满",
  "SevenSegDigit.height|block": "高度",
  "SevenSegDigit.setDigitAlpha": "将显示值设置为数字字符：'0'-'9'",
  "SevenSegDigit.setDigitAlpha|block": "将 %sevenseg(myDigit) 显示值设为%alphaChar",
  "SevenSegDigit.setDigitAlpha|param|alphaChar": "显示值，例如：0",
  "SevenSegDigit.setDigitColor": "设置显示数字颜色",
  "SevenSegDigit.setDigitColor|block": "将 %sevenseg(myDigit) 显示颜色设为 %color=colorindexpicker",
  "SevenSegDigit.setDigitColor|param|color": "数字显示，例如 2",
  "SevenSegDigit.setRadix": "设置数字的显示基数",
  "SevenSegDigit.setRadix|block": "将%sevenseg(myDigit) 的显示基数设为 %radix",
  "SevenSegDigit.setRadix|param|radix": "数字显示，例如：DigitRadix.Decimal",
  "SevenSegDigit.setScale": "设置显示数字大小",
  "SevenSegDigit.setScale|block": "将 %sevenseg(myDigit) 设为 %scale 尺寸大小",
  "SevenSegDigit.setScale|param|scale": "数字显示，例如：SegmentScale.Full",
  "SevenSegDigit.value@set|block": "值",
  "SevenSegDigit.value|block": "值",
  "SevenSegDigit.width|block": "高度",
  "SevenSegDigit.x@set|block": "x",
  "SevenSegDigit.x|block": "x",
  "SevenSegDigit.y@set|block": "y",
  "SevenSegDigit.y|block": "y",
  "Sounds.BaDing|block": "ba ding",
  "Sounds.JumpDown|block": "jump down",
  "Sounds.JumpUp|block": "jump up",
  "Sounds.MagicWand|block": "魔棒",
  "Sounds.PowerDown|block": "power down",
  "Sounds.PowerUp|block": "power up",
  "Sounds.Siren|block": "警笛",
  "Sounds.Wawawawaa|block": "wawawawaa",
  "Sprite": "屏幕上的精灵",
  "Sprite.ax@set|block": "ax (加速度 x)",
  "Sprite.ax|block": "ax (加速度 x)",
  "Sprite.ay@set|block": "ay (加速度 y)",
  "Sprite.ay|block": "ay (加速度 y)",
  "Sprite.bottom@set|block": "底部",
  "Sprite.bottom|block": "底部",
  "Sprite.data": "自定义数据",
  "Sprite.destroy": "摧毁精灵",
  "Sprite.destroy|block": "销毁 %sprite(mySprite) || 特效 %effect 延时 %duration ms",
  "Sprite.height|block": "高度",
  "Sprite.image": "获取当前图像",
  "Sprite.image|block": "%sprite(mySprite) 图像",
  "Sprite.isHittingTile": "检查给定方向是否有障碍物",
  "Sprite.isHittingTile|block": "%sprite(mySprite) 碰到砖块 %direction",
  "Sprite.isOutOfScreen": "指示精灵是否在屏幕之外",
  "Sprite.kind": "精灵的类型",
  "Sprite.kind|block": "%sprite(mySprite) 类型",
  "Sprite.layer": "一层bitset。每个位都是一个图层，默认为1。",
  "Sprite.left@set|block": "左",
  "Sprite.left|block": "左",
  "Sprite.lifespan": "时间以毫秒为单位。寿命每毫秒减少1 \n精灵在达到0时被摧毁",
  "Sprite.lifespan|block": "生命值",
  "Sprite.onCollision": "当精灵与障碍物碰撞时注册代码",
  "Sprite.onCollision|param|direction": "@param 处理器",
  "Sprite.onDestroyed": "在精灵被摧毁时运行代码",
  "Sprite.onOverlap": "当精灵与其他精灵角色重叠时注册代码",
  "Sprite.overlapsWith": "检查此精灵是否与其他精灵重叠",
  "Sprite.overlapsWith|block": "%sprite(mySprite) 叠在 %other=variables_get(otherSprite)",
  "Sprite.right@set|block": "右",
  "Sprite.right|block": "右",
  "Sprite.say": "在给定时间内显示带有文本的语音气泡",
  "Sprite.say|block": "%sprite(mySprite) 说 %text||延时 %millis ms",
  "Sprite.say|param|text": "说的文字，例如：':)'",
  "Sprite.setFlag": "设置精灵标志",
  "Sprite.setFlag|block": "设置 %sprite(mySprite) %flag %on=toggleOnOff",
  "Sprite.setImage": "在精灵上设置图像",
  "Sprite.setImage|block": "设置 %sprite(mySprite) 图像 %img=screen_image_picker",
  "Sprite.setKind": "精灵的类型",
  "Sprite.setKind|block": "设置 %sprite(mySprite) 类型为 %kind",
  "Sprite.setPosition": "从屏幕的左上角开始设置精灵位置（以像素为单位）。",
  "Sprite.setPosition|block": "设置 %sprite(mySprite) 位置 x %x y %y",
  "Sprite.setPosition|param|x": "以像素为单位的水平位置",
  "Sprite.setPosition|param|y": "以像素为单位的水平位置",
  "Sprite.setVelocity": "以像素/秒为单位设置精灵速度",
  "Sprite.setVelocity|block": "设置 %sprite(mySprite) 加速度 vx %vx vy %vy",
  "Sprite.startEffect": "对精灵开启特效",
  "Sprite.startEffect|block": "%sprite(mySprite) 开启特效 %effect || 延时 %duration=timePicker|ms",
  "Sprite.startEffect|param|effect": "创建特效的类型",
  "Sprite.tileHitFrom": "如果有的话，在给定方向上获取障碍精灵",
  "Sprite.tileHitFrom|block": "%sprite(mySprite) 碰到砖块 方向 %direction",
  "Sprite.vx@set|block": "vx (速度 x)",
  "Sprite.vx|block": "vx (速度 x)",
  "Sprite.vy@set|block": "vy (速度 y)",
  "Sprite.vy|block": "vy (速度 y)",
  "Sprite.width|block": "宽度",
  "Sprite.x@set|block": "x",
  "Sprite.x|block": "x",
  "Sprite.y@set|block": "y",
  "Sprite.y|block": "y",
  "Sprite.z@set|block": "z (深度)",
  "Sprite.z|block": "z (深度)",
  "SpriteFlag.AutoDestroy|block": "自动销毁",
  "SpriteFlag.BounceOnWall|block": "碰到屏幕边缘反弹",
  "SpriteFlag.DestroyOnWall|block": "碰到屏幕边缘销毁",
  "SpriteFlag.Ghost|block": "幽灵",
  "SpriteFlag.ShowPhysics|block": "显示坐标与速度",
  "SpriteFlag.StayInScreen|block": "停留于屏幕",
  "SpriteSet.add": "添加精灵，如果添加则返回true; 如果精灵已经在集合中，则为false",
  "SpriteSet.addFrom": "添加精灵并从旧集中删除。如果sprite是旧集而不是新集，则返回true。",
  "SpriteSet.clear": "从集合中删除所有精灵",
  "SpriteSet.contains": "检查精灵是否是集合的一部分",
  "SpriteSet.createFromArray": "从精灵数组中创建一个新的集合",
  "SpriteSet.length": "获取集合中的精灵数量",
  "SpriteSet.pop": "删除集合中的最后一个精灵",
  "SpriteSet.remove": "从集合中删除精灵。如果精灵在集合中, 则返回 true",
  "SpriteSet.sprites": "获取当前精灵列表的快照",
  "String": "合并，拆分和搜索文本字符串。",
  "String.charAt": "返回位于指定索引处的字符。",
  "String.charAt|block": "从 %this=text 中提取字符|位置 %pos",
  "String.charAt|param|index": "所需字符以零为基础的索引。",
  "String.charCodeAt": "返回位于指定位置处的字符的 Unicode 值。",
  "String.charCodeAt|param|index": "所需字符以零为基础的索引。如果指定的索引处没有字符，则返回 NaN。",
  "String.compare": "查看两个字符串中的字符顺序有何不同（以 ASCII 编码）。",
  "String.compare|block": "比较 %this=text| 与 %that",
  "String.compare|param|that": "要与目标字符串进行比较的字符串",
  "String.concat": "返回由两个或多个字符串连接起来的字符串。",
  "String.concat|param|other": "要附加到字符串结尾的字符串。",
  "String.fromCharCode": "使用给定的 ASCII 字符代码编写字符串。",
  "String.fromCharCode|block": "提取字符代码 %code 中的文本",
  "String.includes": "确定字符串是否包含指定字符串的字符。",
  "String.includes|param|searchValue": "找到的文字",
  "String.includes|param|start": "从自选起始索引进行搜索",
  "String.indexOf": "返回字符串中指定值的第一个匹配项的位置。",
  "String.indexOf|param|searchValue": "找到的文字",
  "String.indexOf|param|start": "从自选起始索引进行搜索",
  "String.isEmpty": "返回一个值，用来指示字符串是否为空",
  "String.length": "返回字符串对象的长度。",
  "String.length|block": "%VALUE 的长度",
  "String.slice": "返回当前字符串的子字符串。",
  "String.slice|param|end": "一个过去的字符索引",
  "String.slice|param|start": "第一个字符的索引；可以为负值，表示从结尾处开始数，例如：0",
  "String.split": "根据分隔符拆分字符串",
  "String.split|param|separator": "@param 限制",
  "String.substr": "返回当前字符串的子字符串。",
  "String.substr|block": "%this=text 的子字符串|，起始位置 %start|，长度 %length",
  "String.substr|param|length": "要提取的字符数",
  "String.substr|param|start": "第一个字符的索引；可以为负值，表示从结尾处开始数，例如：0",
  "String@type": "合并，拆分和搜索文本字符串。",
  "String|block": "字符串",
  "animation.Animation.addAnimationFrame": "给动画添加帧",
  "animation.Animation.addAnimationFrame|block": "添加帧 $frame=screen_image_picker 到 $this=variables_get(anim)",
  "animation._actionEnumShim|block": "%arg",
  "animation.attachAnimation": "将动画绑定到精灵上",
  "animation.attachAnimation|block": "绑定动画 $set=variables_get(anim) 到精灵 $sprite=variables_get(mySprite)",
  "animation.createAnimation": "创建动画",
  "animation.createAnimation|block": "创建动画 $action=action_enum_shim 延时 $interval ms",
  "animation.setAction": "给精灵设置动画",
  "animation.setAction|block": "使能动画 $action=action_enum_shim 于 $sprite=variables_get(mySprite)",
  "animation|block": "动画",
  "clearImmediate": "取消当前操作。",
  "clearInterval": "取消使用setInterval（）设置的重复操作。",
  "clearTimeout": "清除setTimeout（）设置的延时。",
  "console": "读取和写入控制台输出的数据。",
  "console.addListener": "为日志消息添加监听器",
  "console.log": "向控制台输出一行文本。",
  "console.logValue": "一个名称：值对作为控制台输出的文本行。",
  "console.logValue|block": "控制台|日志 value %name|= %value",
  "console.logValue|param|name": "值流的名称，例如：“x”",
  "console.logValue|param|value": "要写入的值",
  "console.log|block": "控制台 | 日志%text",
  "console.minPriority": "向监听器发送消息的最低优先级",
  "console.removeListener": "移除监听器",
  "console|block": "控制台",
  "control": "程序控制和事件。",
  "control.AnimationQueue.cancel": "取消当前正在运行的动画并清除队列",
  "control.AnimationQueue.runUntilDone": "在循环中运行'render'，直到它返回false或调用'stop'函数",
  "control.Timer": "计时器",
  "control.Timer.millis": "获取自上次重置以来所经过的毫秒数",
  "control.Timer.millis|block": "%timer|毫秒",
  "control.Timer.pauseUntil": "保持暂停直到达到指定的毫秒数",
  "control.Timer.pauseUntil|block": "%timer|停止 直到(ms) %ms",
  "control.Timer.pauseUntil|param|ms": "暂停时间，例如：5、100、200、500、1000、2000",
  "control.Timer.reset": "重置计时器",
  "control.Timer.reset|block": "%timer|重置",
  "control.Timer.seconds": "获取自上次重置以来所经过的秒数",
  "control.Timer.seconds|block": "%timer|秒",
  "control.allocateNotifyEvent": "向下一个用户分配通知事件",
  "control.assert": "显示错误代码，并在声称为`false`时停止程序。",
  "control.assert|block": "宣称 %cond|参数 %code",
  "control.createBuffer": "新建一个初始化为零的缓冲区。",
  "control.createBufferFromUTF8": "使用 UTF8 编码的字符串创建新缓冲区",
  "control.createBufferFromUTF8|param|str": "要放入缓冲区中的字符串",
  "control.createBuffer|param|size": "缓冲区中的字节数",
  "control.deviceDalVersion": "确定当前运行的系统软件版本。",
  "control.deviceDalVersion|block": "设备版本号",
  "control.deviceSerialNumber": "从内部数据为此设备衍生一个独特、一致的序列号。",
  "control.deviceSerialNumber|block": "设备序列号",
  "control.dmesg": "将数据写入 DMESG 调试缓冲区。",
  "control.dmesgPerfCounters": "性能分析性能计数器的转储值。",
  "control.dmesgPtr": "将消息和值（指针）写入DMESG调试缓冲区。",
  "control.dmesgValue": "转储有关值的内部信息。",
  "control.enablePerfCounter": "启用当前函数的分析。",
  "control.eventContext": "获取当前事件上下文 (如果有)",
  "control.gc": "强制GC并转储有关堆的基本信息。",
  "control.heapDump": "强制 GC 并停止等待调试器执行完整的堆转储。",
  "control.internalOnEvent": "内部使用",
  "control.millis": "获取设备开启的毫秒数。",
  "control.millis|block": "毫秒 (ms)",
  "control.onEvent": "在注册事件触发时运行代码。",
  "control.onEvent|block": "事件|源 %src|值 %value",
  "control.onEvent|param|value": "要匹配的事件值",
  "control.panic": "显示错误代码并停止程序。",
  "control.panic|block": "恐慌 %code",
  "control.panic|param|code": "要显示的错误号。例如: 5",
  "control.popEventContext": "如果有任何先前的上下文，则弹出当前事件上下文并恢复处理程序",
  "control.profilingEnabled": "如果在当前构建中启用了分析，则返回true。",
  "control.pushEventContext": "推送新的事件上下文并清除所有处理程序",
  "control.raiseEvent": "通知：注册处理程序 (registered handler) 发生了事件",
  "control.raiseEvent|block": "触发事件|源 %src|值 %value",
  "control.raiseEvent|param|src": "产生事件组件 (Component) 的 ID",
  "control.raiseEvent|param|value": "特定的组件代码，显示事件的原因。",
  "control.reset": "重置设备。",
  "control.reset|block": "重置",
  "control.runInBackground": "不推荐使用，改为使用``control.runInParallel``。",
  "control.runInBackground|block": "在后台运行",
  "control.runInParallel": "并行运行其他代码。",
  "control.runInParallel|block": "并行运行",
  "control.runProgram": "运行指定的用户程序。",
  "control.timer1|block": "定时器1",
  "control.timer2|block": "定时器2",
  "control.timer3|block": "定时器3",
  "control.timer4|block": "定时器4",
  "control.timer5|block": "定时器5",
  "control.timer6|block": "定时器6",
  "control.timer7|block": "定时器7",
  "control.timer8|block": "定时器8",
  "control.waitForEvent": "阻止调用线程，直到引发指定的事件。",
  "control.waitForEvent|block": "等待时间|源 %src|参数 %value",
  "control.waitMicros": "阻止当前光纤达到给定的微秒",
  "control.waitMicros|block": "等待 (µs)%micros",
  "control.waitMicros|param|micros": "需要等待的毫秒数。例如 4",
  "controller": "访问游戏控件",
  "controller.A|block": "A",
  "controller.Button.isPressed": "指示当前是否按下按钮",
  "controller.Button.isPressed|block": "按钮 %button 按下",
  "controller.Button.onEvent": "按下，释放或按住按钮时运行一些代码",
  "controller.Button.onEvent|block": "当按钮 %button %event",
  "controller.Button.pauseUntil": "暂停直到按下或释放按钮",
  "controller.B|block": "B",
  "controller.Controller.A": "获取右按钮",
  "controller.Controller.B": "获取右按钮",
  "controller.Controller.down": "获取右按钮",
  "controller.Controller.dx": "给定按钮的步长和状态，获得水平移动",
  "controller.Controller.dx|block": "%controller dx (左右)||scaled by %step",
  "controller.Controller.dx|param|step": "距离，例如：100",
  "controller.Controller.dy": "给定按钮的步长和状态，获得垂直移动",
  "controller.Controller.dy|block": "%controller dy (上下)||scaled by %step",
  "controller.Controller.dy|param|step": "距离，例如：100",
  "controller.Controller.isPressed": "指示当前是否按下按钮",
  "controller.Controller.isPressed|block": "按键 %controller %button 按下",
  "controller.Controller.left": "获取左按钮",
  "controller.Controller.menu": "获取右按钮",
  "controller.Controller.moveSprite": "使用控制器中的方向按钮控制精灵。请注意，只要按下方向按钮，这将覆盖\n精灵的当前速度。要停止控制精灵，请为vx和vy传递0。 \n* param sprite要控制的精灵",
  "controller.Controller.moveSprite|block": "%controller 使用按键移动 $sprite=variables_get(mySprite) ||vx $vx vy $vy",
  "controller.Controller.moveSprite|param|vx": "按下左/右时用于水平移动的速度",
  "controller.Controller.moveSprite|param|vy": "按下上/下时用于垂直移动的速度",
  "controller.Controller.onButtonEvent": "按下，释放或按住按钮时运行一些代码",
  "controller.Controller.onButtonEvent|block": "当 控制器 %controller 按键  %button | %event",
  "controller.Controller.onEvent": "注册代码当发生控制器事件时运行",
  "controller.Controller.onEvent|block": "当按钮 %controller %event",
  "controller.Controller.onEvent|param|event": "@param 处理器",
  "controller.Controller.right": "获取右按钮",
  "controller.Controller.up": "获取右按钮",
  "controller.acceleration": "获取加速度值，单位为 mg（开发板平放，屏幕朝上，x=0、y=0 且 z=-1023）",
  "controller.acceleration|block": "加速度值 (mg)|%NAME",
  "controller.acceleration|param|dimension": "测量加速度的轴",
  "controller.anyButton|block": "任意",
  "controller.down|block": "下",
  "controller.dx": "给定按钮的步长和状态，获得水平移动",
  "controller.dx|block": "dx (左右)||比例 %step",
  "controller.dx|param|step": "距离，例如：100",
  "controller.dy": "给定按钮的步长和状态，获得垂直移动",
  "controller.dy|block": "dy (上下)||比例 %step",
  "controller.dy|param|step": "距离，例如：100",
  "controller.left|block": "左",
  "controller.lightLevel": "读取适合 LED 屏幕的光线亮度，范围为“0”（最暗）到“255”（最亮）。",
  "controller.lightLevel|block": "亮度级别",
  "controller.menu|block": "菜单",
  "controller.moveSprite": "使用控制器中的方向按钮控制精灵。请注意，此\n控件将接管sprite的vx和vy并覆盖\n所做的任何更改，除非传递0。 \n* param sprite 要控制的精灵",
  "controller.moveSprite|block": "使用按键移动 $sprite=variables_get(mySprite) ||vx $vx vy $vy",
  "controller.moveSprite|param|vx": "按下左/右时用于水平移动的速度",
  "controller.moveSprite|param|vy": "按下上/下时用于垂直移动的速度",
  "controller.onGesture": "完成一个特定动作（如晃动开发板）时执行操作。",
  "controller.onGesture|block": "当 |%NAME",
  "controller.onGesture|param|gesture": "要跟踪的手势类型",
  "controller.onLightConditionChanged": "注册在光线条件（较暗或较亮）发生变化时运行的事件。",
  "controller.onLightConditionChanged|block": "当亮度 %condition",
  "controller.onLightConditionChanged|param|condition": "事件触发的条件",
  "controller.pauseUntilAnyButtonIsPressed": "暂停程序, 直到按下按钮",
  "controller.player2|block": "玩家 2",
  "controller.player3|block": "玩家 3",
  "controller.player4|block": "玩家 4",
  "controller.right|block": "右",
  "controller.up|block": "上",
  "controller.vibrate": "在给定的持续时间内振动控制器（以毫秒为单位）",
  "controller.vibrate|block": "振动 $millis 毫秒",
  "controller|block": "控制器",
  "control|block": "控制",
  "corgio": "用于Corgi Platformer的精灵皮肤",
  "corgio.create": "从图像和种类创建新的飞镖",
  "corgio.create|block": "小狗的种类 %kind=spritetype || at x %x y %y",
  "corgio.create|param|kind": "制作小狗的种类",
  "corgio.create|param|x": "可选的初始 y 位置, 例如:10",
  "corgio.create|param|y": "可选的初始 y 位置, 例如:70",
  "corgio|block": "小狗",
  "darts": "带有路径预测的飞镖",
  "darts.create": "从图像和种类创建新的飞镖",
  "darts.create|block": "非标%img=screen_image_picker 种类 %kind=spritetype || at x %x y %y",
  "darts.create|param|img": "精灵的图像",
  "darts.create|param|kind": "制作飞镖的种类",
  "darts.create|param|x": "可选的初始 x 位置, 例如:10",
  "darts.create|param|y": "可选的初始 y 位置, 例如:110",
  "darts.degreeToRadian": "将度数转换为弧度",
  "darts.degreeToRadian|param|degree": "转换",
  "darts.xComponent": "评估给定向量的x分量\n\n@return 向量的x分量",
  "darts.xComponent|param|degree": "矢量角度",
  "darts.xComponent|param|magnitude": "向量的大小",
  "darts.yComponent": "评估给定向量的y分量\n\n@return 向量的y分量",
  "darts.yComponent|param|degree": "矢量角度",
  "darts.yComponent|param|magnitude": "向量的大小",
  "darts|block": "飞镖",
  "effects.ImageEffect.applyTo": "将此效果应用于当前精灵的图像",
  "effects.ImageEffect.change": "使用此效果更改给定图像",
  "effects.ImageEffect.startScreenEffect": "在背景图像上重复出现此效果",
  "effects.ImageEffect.startScreenEffect|param|delay": "效果实例之间的延迟",
  "effects.ImageEffect.startScreenEffect|param|times": "应该发生效果的次数",
  "effects.ParticleEffect.destroy": "使用效果销毁提供的精灵\n\n使用此效果的默认速率。",
  "effects.ParticleEffect.start": "将新的粒子动画附加到精灵或锚点一小段时间",
  "effects.ScreenEffect.endScreenEffect": "如果此效果当前作为全屏效果发生，请停止生成粒子并结束效果",
  "effects.ScreenEffect.endScreenEffect|block": "游戏结束特效 %effect",
  "effects.ScreenEffect.startScreenEffect": "创建在整个屏幕上发生的新效果",
  "effects.ScreenEffect.startScreenEffect|block": "游戏开始特效 %effect effect || 延时 %duration m",
  "effects.ashes|block": "尘埃",
  "effects.blizzard|block": "暴风雪",
  "effects.bubbles|block": "泡泡",
  "effects.clearParticles": "删除锚点位置的所有特效",
  "effects.clearParticles|block": "清除 %anchor=variables_get(mySprite) 粒子特效",
  "effects.clearParticles|param|anchor": "锚点去除特效",
  "effects.clouds|block": "云",
  "effects.confetti|block": "纸屑",
  "effects.coolRadial|block": "寒冷的射线",
  "effects.disintegrate|block": "使分离",
  "effects.dissolve|block": "分解",
  "effects.fire|block": "火焰",
  "effects.fountain|block": "喷泉",
  "effects.halo|block": "光晕",
  "effects.hearts|block": "心",
  "effects.melt|block": "融化",
  "effects.rings|block": "环",
  "effects.slash|block": "沼泽",
  "effects.smiles|block": "笑脸",
  "effects.splatter|block": "飞溅",
  "effects.spray|block": "喷涂",
  "effects.starField|block": "星图",
  "effects.trail|block": "轨迹",
  "effects.warmRadial|block": "温和的射线",
  "effects|block": "特效",
  "forever": "在后台无限重复代码。每次迭代时，允许其他代码运行。",
  "forever|block": "无限循环",
  "game": "游戏过渡和对话",
  "game.addScenePopHandler": "注册每当从场景堆栈中弹出场景时运行的处理程序。对于需要在\n事件上下文更改时存储/恢复状态的扩展非常有用。处理程序在弹出操作之后运行。 \n（即在game.currentScene() ）改变之后的）\n* param 处理程序从堆栈顶部删除场景时运行的代码",
  "game.addScenePushHandler": "注册每当场景被推送到场景堆栈时运行的处理程序。对于需要在\n事件上下文更改时存储/恢复状态的扩展非常有用。处理程序在推送操作之后运行\n（即，在game.currentScene()改变之后）\n* param处理程序当场景被推入堆栈时运行的代码",
  "game.ask": "提示用户输入布尔问题",
  "game.askForString": "向玩家询问字符串值。",
  "game.askForString|block": "提问 %message || 最大字符 %answerLength",
  "game.askForString|param|answerLength": "用户可以输入的最大字符数（1 - 24）",
  "game.askForString|param|message": "要在文本输入屏幕上显示的消息",
  "game.ask|block": "提问 %title||%subtitle",
  "game.debug": "确定是否显示诊断",
  "game.onPaint": "在精灵之前画在屏幕上，在背景之后",
  "game.onShade": "在精灵之后画在屏幕上",
  "game.onUpdate": "更新精灵的位置和速度",
  "game.onUpdateInterval": "在一段时间内运行代码。这在game.onUpdate()之前执行",
  "game.onUpdateInterval|block": "当游戏更新 %period=timePicker ms",
  "game.onUpdate|block": "当游戏更新",
  "game.over": "完成游戏并显示分数",
  "game.over|block": "游戏结束|| %win=toggleWinLose 附上%effect 效果",
  "game.removeScenePopHandler": "删除场景弹出处理程序。对于需要在\n事件上下文更改时存储/恢复状态的扩展非常有用。\n* param handler 要删除的处理程序",
  "game.removeScenePushHandler": "删除场景推送处理程序。对于需要在\n事件上下文更改时存储/恢复状态的扩展非常有用。\n* param handler 要删除的处理程序",
  "game.reset": "重置当前游戏。这通常相当于按\n重置按钮以重新启动当前程序",
  "game.reset|block": "游戏复位",
  "game.runtime": "返回自游戏开始以来的时间（以毫秒为单位）",
  "game.runtime|block": "时间自开始 (ms)",
  "game.setDialogCursor": "更改用于显示在对话框左下角的光标的默认图像。\n* param cursor用于光标的图像",
  "game.setDialogCursor|block": "将对话框光标设置为 %frame=screen_image_picker",
  "game.setDialogFrame": "将默认对话框更改为新图像。对话框\n分为三行和三列，用于定义对话框的外框。\n* param frame 一个宽度和高度可被三整除的方形图像",
  "game.setDialogFrame|block": "将对话框设置为 %frame=screen_image_picker",
  "game.setDialogTextColor": "更改对话框中文本的颜色。\n* param color颜色的索引0-15",
  "game.setDialogTextColor|block": "将对话框文本颜色设置为 %color=colorindexpicker",
  "game.setGameOverEffect": "设置游戏结束时发生的效果",
  "game.setGameOverEffect|param|win": "动画是否应该在胜利上运行 (true)",
  "game.setGameOverSound": "设置玩家获胜时播放的音乐",
  "game.showLongText": "在对话框中显示一个长文本字符串，该对话框将使用“A”或“向下”按钮滚动。\n使用“向上”按钮显示文本的上一部分。直到文本的最后一页被解除，此函数\n停止执行\n* param str 要显示的文本",
  "game.showLongText|block": "显示长文本 %str %layout",
  "game.showLongText|param|layout": "要用于对话框的布局",
  "game.splash": "显示标题和可选的字幕菜单",
  "game.splash|block": "显现 %title||%subtitle",
  "game.splash|param|title": "@param 副标题",
  "game|block": "游戏",
  "helpers.imageRotated": "返回顺时针旋转90度，180度，270度的图像",
  "helpers|block": "助手",
  "hex": "标记的十六进制文字转换器",
  "image.create": "创建新的空白（透明）图像",
  "image.create|block": "创建图像 宽 %width 高 %height",
  "image.doubledIcon": "图标大小的两倍",
  "image.ofBuffer": "使用给定内容创建新图像",
  "image.screenImage": "获取屏幕图像",
  "image.screenImage|block": "屏幕",
  "images": "图像处理块",
  "images._image": "图像",
  "images._image|block": "%image",
  "images._image|param|image": "图像",
  "images._screenImage|block": "%img",
  "images._spriteImage|block": "%img",
  "images._tileMapImage|block": "%img",
  "images|block": "图像",
  "image|block": "图像",
  "img": "标记图像文字转换器",
  "info": "头部显示\n\n头部显示",
  "info.PlayerInfo.changeLifeBy": "更改玩家的生命",
  "info.PlayerInfo.changeLifeBy|block": "将 %player 生命值 增加 %value",
  "info.PlayerInfo.changeScoreBy": "更改玩家的分数",
  "info.PlayerInfo.changeScoreBy|block": "将 %player 分数 增加 %value",
  "info.PlayerInfo.hasLife": "如果给定玩家当前具有为健康设置的值，则返回true，否则返回false。",
  "info.PlayerInfo.hasLife|block": "%player 剩余生命",
  "info.PlayerInfo.life": "获取玩家生命",
  "info.PlayerInfo.life|block": "%player 生命值",
  "info.PlayerInfo.onLifeZero": "当生命达到零时运行代码",
  "info.PlayerInfo.onLifeZero|block": "当 %player 生命值为零",
  "info.PlayerInfo.score": "获取玩家得分",
  "info.PlayerInfo.score|block": "%player 得分",
  "info.PlayerInfo.setLife": "设置玩家生命",
  "info.PlayerInfo.setLife|block": "设置 %player 生命值为 %value",
  "info.PlayerInfo.setScore": "设置玩家得分",
  "info.PlayerInfo.setScore|block": "设置 %player 得分值为 %value",
  "info.backgroundColor": "获取得分，倒计时和生命元素背景的当前颜色",
  "info.borderColor": "获取分数，倒计时和生命元素周围边框的当前颜色",
  "info.changeLifeBy": "按给定的数量来改变生命",
  "info.changeLifeBy|block": "将生命值增加 %value",
  "info.changeLifeBy|param|value": "生命值变化, 如:-1",
  "info.changeScoreBy": "按给定的值来改变得分",
  "info.changeScoreBy|block": "将得分值增加 %value",
  "info.changeScoreBy|param|value": "变化的数值, 如: 1",
  "info.fontColor": "获取得分，倒计时和生命元素中所用文本的当前颜色",
  "info.highScore": "获得最后记录的高分",
  "info.highScore|block": "最高分",
  "info.life": "获得生命的数量",
  "info.life|block": "生命值",
  "info.onCountdownEnd": "倒计时到达0时运行代码。如果未调用此函数\n，则调用game.over()",
  "info.onCountdownEnd|block": "当倒计时结束",
  "info.onLifeZero": "当玩家的生命值达到0时运行代码。如果未调用此函数\n，则调用game.over()",
  "info.onLifeZero|block": "当生命值为零",
  "info.player1|block": "玩家 1",
  "info.player2|block": "玩家 2",
  "info.player3|block": "玩家 3",
  "info.player4|block": "玩家 4",
  "info.score": "获得当前分数（如果有）",
  "info.score|block": "分数",
  "info.setBackgroundColor": "设置得分，倒计时和生命元素的背景颜色。默认为1",
  "info.setBackgroundColor|param|color": "颜色的索引 (0-15)",
  "info.setBorderColor": "设置分数，倒计时和生命元素周围边框的颜色。默认为3",
  "info.setBorderColor|param|color": "颜色的索引 (0-15)",
  "info.setFontColor": "设置得分，倒计时和生命中使用的文本的颜色。默认为3",
  "info.setFontColor|param|color": "颜色的索引 (0-15)",
  "info.setLife": "设置生命的数量",
  "info.setLifeImage": "替换用于表示玩家生命的图像。图像\n应不大于8x8",
  "info.setLife|block": "将生命值设为 %value",
  "info.setLife|param|value": "生命数量，例如 3",
  "info.setScore": "设置得分",
  "info.setScore|block": "将得分值设为 %value",
  "info.showCountdown": "设置是否应显示分数",
  "info.showCountdown|param|on": "如果为 true, 则显示分数; 如果为 true, 则显示分数。否则, 分数是隐藏的",
  "info.showLife": "设置是否应显示生命",
  "info.showLife|param|on": "如果是真的, 生命就会显现出来; 如果是真的, 生命就会显现出来。否则, 生命就会被隐藏",
  "info.showScore": "设置是否应显示分数",
  "info.showScore|param|on": "如果为 true, 则显示分数; 如果为 true, 则显示分数。否则, 分数是隐藏的",
  "info.startCountdown": "以秒为单位开始给定持续时间的倒计时",
  "info.startCountdown|block": "开始倒计时 %duration (s)",
  "info.startCountdown|param|duration": "倒计时的持续时间，例如：10",
  "info.stopCountdown": "停止当前倒计时并隐藏计时器显示",
  "info.stopCountdown|block": "停止倒计时",
  "info.updateHighScore": "发送当前分数和新的高分",
  "info|block": "游戏信息",
  "input": "响应和读取按钮和传感器中的数据。\n\n来自传感器的事件和数据。",
  "input.acceleration": "获取加速度值，单位为 mg（开发板平放，屏幕朝上，x=0、y=0 且 z=-1023）",
  "input.acceleration|block": "加速度值 (mg)|%NAME",
  "input.acceleration|param|dimension": "待办事项",
  "input.buttonA|block": "按键 A",
  "input.buttonB|block": "按键 A",
  "input.buttonDown|block": "下按键",
  "input.buttonLeft|block": "左按键",
  "input.buttonMenu|block": "菜单按钮",
  "input.buttonRight|block": "右按键",
  "input.buttonUp|block": "上按键",
  "input.lightLevel": "读取适合 LED 屏幕的光线亮度，范围为“0”（最暗）到“255”（最亮）。",
  "input.lightLevel|block": "亮度级别",
  "input.onGesture": "完成一个特定动作（如晃动开发板）时执行操作。",
  "input.onGesture|block": "当 |%NAME",
  "input.onGesture|param|body": "特定动作发生时要运行的代码",
  "input.onGesture|param|gesture": "要跟踪的特定动作类型，如 Gesture.Shake",
  "input.onLightConditionChanged": "注册在光线条件（较暗或较亮）发生变化时运行的事件。",
  "input.onLightConditionChanged|block": "当亮度 %condition",
  "input.onLightConditionChanged|param|condition": "事件触发的条件",
  "input.rotation": "倾斜或者转动设备的度数，沿着“X 轴”或“Y 轴”旋转。",
  "input.rotation|block": "旋转 (°)|%NAME",
  "input.rotation|param|kind": "待办事项",
  "input.setAccelerometerRange": "设置加速计样本范围（以重力加速度表示）。",
  "input.setAccelerometerRange|block": "设置加速计范围 %range",
  "input.setAccelerometerRange|param|range": "描述测量的最大强度加速度的值",
  "input.setLightThreshold": "设置灯光条件事件的阈值。",
  "input.setLightThreshold|block": "设置 %condition| 亮度阈值 %value",
  "input|block": "输入",
  "jacdac": "联合异步通信，设备不可知控制。\nJACDAC协议支持",
  "jacdac.AccelerometerClient.get": "读取传感器的值",
  "jacdac.AccelerometerClient.get|block": "jacdac %accelerometer %dimension",
  "jacdac.AccelerometerClient.get|param|dimension": "要读取的通道",
  "jacdac.AccelerometerClient.onEvent": "当传感器上发生事件时，运行代码",
  "jacdac.AccelerometerClient.onEvent|block": "jacdac %accelerometer 在 %gesture",
  "jacdac.AccelerometerClient.onEvent|param|gesture": "@param 处理器",
  "jacdac.AccelerometerClient.strength": "从传感器读取当前强度值",
  "jacdac.AccelerometerClient.x": "从传感器读取当前 x 值",
  "jacdac.AccelerometerClient.y": "从传感器读取当前 y 值",
  "jacdac.AccelerometerClient.z": "从传感器读取当前 z 值",
  "jacdac.ButtonClient.isPressed": "从传感器读取当前 x 值",
  "jacdac.ButtonClient.isPressed|block": "jacdac %button被按下",
  "jacdac.ButtonClient.onEvent": "当传感器上发生事件时，运行代码",
  "jacdac.ButtonClient.onEvent|block": "jacdac %button 在%event",
  "jacdac.Client.setSerialNumber": "指定此虚拟驱动程序应绑定到的序列号",
  "jacdac.ConsoleService": "控制台日志驱动。驱动程序关闭，广播或监听。无法同时进行。",
  "jacdac.ConsoleService.setMode": "设置控制台服务模式",
  "jacdac.ConsoleService.setMode|block": "设置终端 %service 模式为 %mode",
  "jacdac.ControllerClient.AIsPressed@set|block": "A 被按下",
  "jacdac.ControllerClient.AIsPressed|block": "A 被按下",
  "jacdac.ControllerClient.BIsPressed@set|block": "B 被按下",
  "jacdac.ControllerClient.BIsPressed|block": "B 被按下",
  "jacdac.ControllerClient.downIsPressed@set|block": "下 被按下",
  "jacdac.ControllerClient.downIsPressed|block": "下 被按下",
  "jacdac.ControllerClient.leftIsPressed@set|block": "左 被按下",
  "jacdac.ControllerClient.leftIsPressed|block": "左 被按下",
  "jacdac.ControllerClient.onStateUpdate": "注册 要在即将发送状态时运行 的代码",
  "jacdac.ControllerClient.onStateUpdate|block": "当控制器 %controller 状态更新",
  "jacdac.ControllerClient.rightIsPressed@set|block": "右 被按下",
  "jacdac.ControllerClient.rightIsPressed|block": "右 被按下",
  "jacdac.ControllerClient.upIsPressed@set|block": "上 被按下",
  "jacdac.ControllerClient.upIsPressed|block": "上 被按下",
  "jacdac.Driver.handleControlPacket": "当接收到控制数据包时由逻辑驱动程序调用",
  "jacdac.Driver.handlePacket": "当数据包发送到此驱动程序时, 由逻辑驱动程序调用\n当数据包未在此处处理时返回 false。",
  "jacdac.Driver.onDriverEvent": "注册代码以在特定事件上运行",
  "jacdac.Driver.onDriverEvent|param|event": "@param 处理器",
  "jacdac.Driver.start": "注册并启动驱动程序",
  "jacdac.Driver.start|block": "启动服务 %service",
  "jacdac.GamepadClient.move": "设置游戏手柄上的当前移动",
  "jacdac.GamepadClient.move|block": "%gamepad %index|移动通过 x %x| y %y",
  "jacdac.GamepadClient.setButton": "将按钮状态设置为 \"向下\"",
  "jacdac.GamepadClient.setButton|block": "%gamepad 按钮 %index=jdjoystickStandardButton|%down=toggleDownUp",
  "jacdac.GamepadClient.setThrottle": "设置油门状态",
  "jacdac.GamepadClient.setThrottle|block": "%gamepad 设置油门 %index|to %value",
  "jacdac.JDDevice.isBroadcastDriver": "聆听翻译 用于确定驱动程序当前所处的模式。\n*这将检查flags字段是否类似于DriverType枚举中指定的BroadcastDriver模式。\n* @returns 如果在BroadcastDriver模式下，返回true。",
  "jacdac.JDDevice.isConnected": "指示总线上的驱动程序是否已连接",
  "jacdac.JDDevice.isConnecting": "指示总线上的驱动程序是否正在连接",
  "jacdac.JDDevice.isHostDriver": "聆听翻译 用于确定驱动程序当前所处的模式。\n*这将检查flags字段是否类似于DriverType枚举中指定的HostDriver模式。\n* @returns 如果在SnifferDriver模式下，返回true。",
  "jacdac.JDDevice.isPairable": "指示驱动程序当前是否可以与另一个驱动程序配对。\n* @returns 返回true，如果可配对。",
  "jacdac.JDDevice.isPaired": "指示驱动程序当前是否可以与另一个驱动程序配对。\n* @returns 返回true，如果已经配对",
  "jacdac.JDDevice.isPairedDriver": "用于确定驱动程序当前所处的模式。\n*这将检查flags字段是否类似于DriverType枚举中指定的PairedDriver模式。如\n* @returns 返回true，果处于PairedDriver模式。",
  "jacdac.JDDevice.isPairing": "指示驱动程序当前是否正在与另一个驱动程序配对。\n* @returns 返回true，如果正在配对",
  "jacdac.JDDevice.isSnifferDriver": "聆听翻译 用于确定驱动程序当前所处的模式。\n*这将检查flags字段是否类似于DriverType枚举中指定的SnifferDriver模式。\n* @returns 如果在SnifferDriver模式下，返回true。",
  "jacdac.JDDevice.isVirtualDriver": "用于确定驱动程序当前所处的模式。\n*这将检查flags字段是否类似于DriverType枚举中指定的VirtualDriver 模式。如\n* @returns 返回true，果处于VirtualDriver 模式。",
  "jacdac.KeyboardClient.functionKey|block": "%keyboard 功能按键 %key|%event",
  "jacdac.KeyboardClient.key": "发送密钥命令",
  "jacdac.KeyboardClient.key|block": "%keyboard 按键 %key|%event",
  "jacdac.KeyboardClient.mediaKey": "发送媒体密钥命令",
  "jacdac.KeyboardClient.mediaKey|block": "%keyboard 媒体按键 %key|%event",
  "jacdac.KeyboardClient.type": "向键盘发送一系列击键",
  "jacdac.KeyboardClient.type|block": "%keyboard 类型 %text",
  "jacdac.LCDClient.clear": "清除屏幕",
  "jacdac.LCDClient.clear|block": "jacdac 清除 %client",
  "jacdac.LCDClient.setBlink": "启用或禁用闪烁",
  "jacdac.LCDClient.setBlink|block": "jacdac 设置%client 闪烁%enabled",
  "jacdac.LCDClient.setBlink|param|enabled": "设为闪烁",
  "jacdac.LCDClient.setCursor": "显示或隐藏光标",
  "jacdac.LCDClient.setCursor|block": "jacdac 设置 %client 光标%enabled",
  "jacdac.LCDClient.setCursor|param|enabled": "显示光标为真，否则为假",
  "jacdac.LCDClient.setDisplay": "启用或禁用显示",
  "jacdac.LCDClient.setDisplay|block": "jacdac 设置 %client 显示 %enabled",
  "jacdac.LCDClient.setDisplay|param|enabled": "显示屏幕为真，否则为假",
  "jacdac.LCDClient.showNumber": "在LED屏幕上显示数字。",
  "jacdac.LCDClient.showNumber|block": "jacdac %client 显示数字%value",
  "jacdac.LCDClient.showNumber|param|value": "要显示的数字",
  "jacdac.LCDClient.showString": "在LED屏幕上显示字符串。",
  "jacdac.LCDClient.showString|block": "jacdac %client 显示字符串 %text",
  "jacdac.LCDClient.showString|param|text": "显示文本",
  "jacdac.LightClient.setAll": "将灯带上所有像素设置为一种 RGB 颜色。",
  "jacdac.LightClient.setAll|block": "set %strip 所有像素为 %rgb=colorNumberPicker",
  "jacdac.LightClient.setAll|param|rgb": "LED的RGB 颜色",
  "jacdac.LightClient.setBrightness": "设置灯带的亮度。此标志仅适用于将来的操作。",
  "jacdac.LightClient.setBrightness|block": "set %strip 亮度为 %brightness",
  "jacdac.LightClient.setBrightness|param|brightness": "led 亮度范围0-255。例如:20",
  "jacdac.LightClient.showAnimation": "在动画队列中显示动画或排队动画",
  "jacdac.LightClient.showAnimation|block": "显示 %strip 动画 %animation 给 %duration=timePicker 毫秒",
  "jacdac.LightClient.showAnimation|param|animation": "要运行的动画",
  "jacdac.LightClient.showAnimation|param|duration": "要运行的持续时间 (以毫秒为单位), 例如: 500",
  "jacdac.LightSensorClient.lightLevel": "从传感器读取当前 x 值",
  "jacdac.LightSensorClient.lightLevel|block": "jacdac %lightsensor 光强",
  "jacdac.LightSensorClient.onEvent": "当传感器上发生事件时，运行代码",
  "jacdac.LightSensorClient.onEvent|block": "jacdac %lightsensor 在 %lightCondition",
  "jacdac.LightSensorClient.setLightConditionThreshold": "设置事件的阈值",
  "jacdac.LightSensorClient.setLightConditionThreshold|block": "jacdac %lightsensor 设置阈值 %level to %value",
  "jacdac.LightSensorClient.setLightConditionThreshold|param|level": "@param 值",
  "jacdac.MessageBusService": "监听消息总线事件的驱动程序",
  "jacdac.MicrophoneClient.onLoudSound": "当传感器上发生事件时，运行代码",
  "jacdac.MicrophoneClient.onLoudSound|block": "jacdac %microphone 最大声音",
  "jacdac.MicrophoneClient.setLoudSoundThreshold": "设置事件的阈值",
  "jacdac.MicrophoneClient.setLoudSoundThreshold|block": "jacdac %microphone 设置最大阈值为 %value",
  "jacdac.MicrophoneClient.soundLevel": "从传感器读取当前 x 值",
  "jacdac.MicrophoneClient.soundLevel|block": "jacdac %microphone 声音等级",
  "jacdac.MouseClient.move": "移动鼠标",
  "jacdac.MouseClient.move|block": "%mouse 移动 x %x|y %y",
  "jacdac.MouseClient.setButton": "将鼠标按钮状态设置为 \"向下\"",
  "jacdac.MouseClient.setButton|block": "%mouse 按键 %index|%down=toggleDownUp",
  "jacdac.MouseClient.turnWheel": "移动鼠标",
  "jacdac.MouseClient.turnWheel|block": "%mouse 滑动轮 %w",
  "jacdac.MusicClient.playTone": "在一定时间内通过扬声器播放一个音调。",
  "jacdac.MusicClient.playTone|block": "播放 %music 音调|at %note|for %duration",
  "jacdac.MusicClient.playTone|param|frequency": "要播放的音调的音阶，单位为赫兹 (Hz)，例如：440",
  "jacdac.MusicClient.playTone|param|ms": "音调持续时间，单位为毫秒 (ms)，例如：500",
  "jacdac.PixelClient.setBrightness": "设置neopixel的亮度。此标志仅适用于将来的操作。",
  "jacdac.PixelClient.setBrightness|block": "设置 %pixel 亮度 %brightness",
  "jacdac.PixelClient.setColor": "将板载像素设置为给定的颜色。",
  "jacdac.PixelClient.setColor|block": "jacdac 设置 %pixel 颜色 %rgb=colorNumberPicker",
  "jacdac.SensorClient.setStreaming": "启用或禁用传感器内部状态的流式传输",
  "jacdac.SensorClient.setStreaming|block": "jacdac %sensor 设置流媒体 %on",
  "jacdac.SensorClient.setStreaming|param|on": "流媒体已启用",
  "jacdac.SensorService": "JacDac服务在传感器和流数据上运行",
  "jacdac.ServoClient.run": "将油门设置在连续伺服上",
  "jacdac.ServoClient.run|block": "jacdac 连续 %servo 运行在 %speed=speedPicker \\%",
  "jacdac.ServoClient.run|param|speed": "电机的油门从-100% 到100%",
  "jacdac.ServoClient.setAngle": "设置伺服舵机角度",
  "jacdac.ServoClient.setAngle|block": "jacdac 设置 %servo 角度 %degrees=protractorPicker °",
  "jacdac.ServoClient.setPulse|block": "jacdac 设置 %servo 脉冲到 %micros 微秒",
  "jacdac.ServoClient.stop|block": "jacdac 停止 %servo",
  "jacdac.SwitchClient.onEvent": "当传感器上发生事件时，运行代码",
  "jacdac.SwitchClient.onEvent|block": "jacdac %switch 在 %event",
  "jacdac.SwitchClient.right": "从传感器读取当前 x 值",
  "jacdac.ThermometerClient.onTemperatureConditionChanged": "当传感器上发生事件时，运行代码",
  "jacdac.ThermometerClient.onTemperatureConditionChanged|block": "jacdac %lightsensor 在 %lightCondition",
  "jacdac.ThermometerClient.temperature": "从传感器读取当前 x 值",
  "jacdac.ThermometerClient.temperature|block": "温度 %unit",
  "jacdac.TouchClient.onEvent": "当传感器上发生事件时，运行代码",
  "jacdac.TouchClient.onEvent|block": "jacdac %button 在%event",
  "jacdac.TouchClient.value": "从传感器读取当前 x 值",
  "jacdac.TouchClient.value|block": "jacdac %button 值",
  "jacdac.accelerometerClient|block": "加速计客户端",
  "jacdac.accelerometerService|block": "加速度计服务",
  "jacdac.attachButtonToController": "将按钮的事件连接到控制器按钮",
  "jacdac.attachButtonToController|block": "jacdac 绑定 $button 去控制器 $controllerButton",
  "jacdac.broadcastEvent": "通过JACDAC管理特定事件",
  "jacdac.broadcastEvent|block": "广播事件|源 %src|值 %value",
  "jacdac.buttonClient|block": "按钮客户端",
  "jacdac.clearBridge": "清除任何现有的桥",
  "jacdac.consoleService|block": "终端服务",
  "jacdac.controllerClient|block": "控制器客户端",
  "jacdac.controllerService|block": "控制器服务",
  "jacdac.deviceName": "获取当前设备名称",
  "jacdac.deviceName|block": "jacdac 设备名称",
  "jacdac.drivers": "获取驱动程序的列表及其在 JACDAC 中的状态",
  "jacdac.eventId": "获取jacdac事件ID",
  "jacdac.gamepadButton": "映射到按钮索引的标准布局按钮",
  "jacdac.gamepadButton|block": "%button",
  "jacdac.gamepadButton|param|button": "按钮的名称",
  "jacdac.gamepadClient|block": "游戏控制柄客户端",
  "jacdac.isConnected": "如果连接好, 则返回真, 如果总线条件不好，则返回假",
  "jacdac.isRunning": "指示 JacDac 是否正在运行",
  "jacdac.keyboardClient|block": "键盘客户端",
  "jacdac.lcdClient": "字符 LCD 客户端",
  "jacdac.lcdClient|block": "液晶客户端",
  "jacdac.lightClient|block": "光客户端",
  "jacdac.lightSensorClient|block": "光传感器客户端",
  "jacdac.lightSensorService|block": "光照度传感器服务",
  "jacdac.logicEventId": "获取 jacdac 逻辑驱动程序事件 id",
  "jacdac.messageBusService|block": "消息总线服务",
  "jacdac.microphoneClient|block": "麦克风客户端",
  "jacdac.mouseClient|block": "鼠标客户端",
  "jacdac.musicClient|block": "音乐客户端",
  "jacdac.onReceivedMessage": "注册代码以运行特定消息",
  "jacdac.onReceivedMessage|block": "当jacdac 收到$msg",
  "jacdac.onReceivedMessage|param|msg": "@param 处理器",
  "jacdac.pixelClient|block": "像素客户端",
  "jacdac.raiseEvent": "在 JacDac 上发送事件",
  "jacdac.raiseEvent|block": "触发事件|源 %src|参数 %value",
  "jacdac.sendMessage": "通过JacDac广播信息",
  "jacdac.sendMessage|block": "jacdac 发送 $msg",
  "jacdac.sendPacket": "发送数据包",
  "jacdac.sendPacket|param|pkt": "jackdac 数据",
  "jacdac.servoClient|block": "伺服客户端",
  "jacdac.setDeviceName": "给设备起一个容易理解的名称",
  "jacdac.setDeviceName|block": "jacdac设置设备名称为 $name",
  "jacdac.start": "启动JacDac协议",
  "jacdac.state": "获取总线状态",
  "jacdac.stop": "启动JacDac协议",
  "jacdac.switchClient|block": "触发按键客户端",
  "jacdac.thermometerClient|block": "温度计客户端",
  "jacdac.touchClient|block": "触摸客户端",
  "jacdac|block": "jacdac",
  "light.NeoPixelStrip.graph|param|value": "当前要绘制的值",
  "light.NeoPixelStrip.setAll|block": "设置 %strip 所有像素为 %rgb=colorNumberPicker",
  "light.NeoPixelStrip.setBrightness|block": "设置 %strip 亮度 %brightness",
  "light.NeoPixelStrip.setBuffered|block": "设置 %strip 缓冲 %on",
  "light.NeoPixelStrip.setLength|block": "设置 %strip 长度到 %length 像素",
  "light.NeoPixelStrip.setMode|block": "设置 %strip 模式为 %mode",
  "light.animation|block": "%kind",
  "light.clear|block": "晴",
  "light.colors|block": "%color",
  "light.graph|param|value": "当前要绘制的值",
  "light.sendBuffer": "将可编程光缓冲器发送到指定的数字引脚",
  "light.sendBuffer|param|buf": "要发送到引脚的缓冲区",
  "light.sendBuffer|param|clk": "时钟线，如果不",
  "light.sendBuffer|param|data": "灯连接的引脚",
  "light.sendBuffer|param|mode": "颜色编码模式",
  "light|block": "%timer|毫秒",
  "loops.forever": "在后台无限重复代码。每次迭代时，允许其他代码运行。",
  "loops.forever|block": "无限循环",
  "loops.pause": "暂停以毫秒为单位的指定时间",
  "loops.pause|block": "暂停 %pause=timePicker|ms",
  "loops.pause|param|ms": "暂停的时间，例如 100、200、500、1000、2000",
  "loops|block": "循环",
  "msgpack.packNumberArray": "将数字数组打包到缓冲区中。",
  "msgpack.packNumberArray|param|nums": "要打包的数字",
  "msgpack.unpackNumberArray": "将缓冲区解包为数字数组。",
  "msgpack|block": "信息包",
  "music": "生成音乐音调。",
  "music.Melody.loop": "开始在循环中播放声音，不必等待它完成。",
  "music.Melody.loop|block": "循环播放 %sound",
  "music.Melody.play": "开始播放声音，不必等待它完成。",
  "music.Melody.playUntilDone": "播放声音并等待声音完成。",
  "music.Melody.playUntilDone|block": "播放声音 %sound|直到结束",
  "music.Melody.play|block": "播放 %sound",
  "music.Melody.stop": "停止播放声音",
  "music.Melody.stop|block": "停止播放 %sound",
  "music.baDing|block": "ba ding",
  "music.beat": "以毫秒（节拍分数）返回节拍的持续时间。",
  "music.beat|block": "%fraction|节拍",
  "music.beat|param|fraction": "当前整个音符的分数，例如：BeatFraction.Half",
  "music.changeTempoBy": "将速度向上或向下改变一定量的每分钟节拍（bpm）。",
  "music.changeTempoBy|block": "改变节奏 %value|(bpm)",
  "music.changeTempoBy|param|bpm": "节奏的变化（以每分钟节拍数表示），例如 20",
  "music.jumpDown|block": "jump down",
  "music.jumpUp|block": "jump up",
  "music.magicWand|block": "魔棒",
  "music.noteFrequency": "获取音符的频率。",
  "music.noteFrequency|block": "%note",
  "music.noteFrequency|param|name": "音符名称，例如 Note.C",
  "music.playSound": "开始播放声音，不用等待它完成。 \n音符用以下格式表示为字符串: NOTE[octave][:duration]",
  "music.playSoundUntilDone": "播放声音并等待声音完成。 \n音符用以下格式表示为字符串: NOTE[octave][:duration]",
  "music.playSoundUntilDone|block": "播放音乐 %sound=music_sounds|直到结束",
  "music.playSoundUntilDone|param|sound": "演奏的旋律",
  "music.playSound|block": "播放音乐 %sound=music_sounds",
  "music.playSound|param|sound": "演奏的旋律",
  "music.playTone": "通过扬声器将音调播放一定时间。",
  "music.playTone|block": "播放|音符 %note=device_note|延时 %duration=device_beat",
  "music.playTone|param|frequency": "要播放的音调的音阶，单位为赫兹 (Hz)",
  "music.playTone|param|ms": "音调持续时间，以毫秒（ms）为单位，例如：BeatFraction.Half",
  "music.powerDown|block": "power down",
  "music.powerUp|block": "power up",
  "music.rest": "休息，或沉默一段时间（以毫秒为单位）。",
  "music.rest|block": "休止| %duration=device_beat",
  "music.rest|param|ms": "休息持续时间，以毫秒（ms）为单位，例如: BeatFraction.Half",
  "music.ringTone": "播放音调。",
  "music.ringTone|block": "响铃|音符 %note=device_note",
  "music.ringTone|param|frequency": "要播放的音调的音阶，单位为赫兹 (Hz)",
  "music.setTempo": "将节奏设定为不同的每分钟节拍数 (bpm)。",
  "music.setTempo|block": "设置节拍为 %value|(bpm)",
  "music.setTempo|param|bpm": "新节奏（以每分钟节拍数表示），例如 120",
  "music.setVolume": "设置声音合成器的默认输出音量。",
  "music.setVolume|block": "设置音量 %volume",
  "music.setVolume|param|volume": "音量 0...255",
  "music.siren|block": "警笛",
  "music.sounds": "获取内置旋律的旋律字符串。",
  "music.sounds|block": "%name",
  "music.sounds|param|name": "音符名称，例如 Note.C",
  "music.stopAllSounds": "停止播放所有声音。",
  "music.stopAllSounds|block": "停止所有声音",
  "music.tempo": "以每分钟节拍（bpm）返回节奏。 Tempo是音符播放的速度（bpm =每分钟节拍数）。速度值越大，音符播放的速度越快。",
  "music.tempo|block": "节奏 (bpm)",
  "music.volume": "获取当前音量",
  "music.wawawawaa|block": "wawawawaa",
  "music|block": "音乐",
  "parseFloat": "将字符串转换为数字。",
  "parseFloat|block": "将 %text 解析为数字",
  "parseInt": "将字符串转换为整数。",
  "parseInt|block": "解析为整数 %text",
  "particles.AreaFactory": "用于在矩形区域内创建粒子的工厂",
  "particles.BubbleSource": "颗粒源，其中颗粒水平振荡，偶尔在给定数量的定义状态之间改变",
  "particles.FireSource": "颗粒源，其中颗粒偶尔会相互改变速度",
  "particles.Particle": "单个粒子",
  "particles.ParticleAnchor": "粒子源自的锚点",
  "particles.ParticleFactory": "产生粒子的工厂",
  "particles.ParticleFactory.createParticle": "在给定锚点的位置生成粒子",
  "particles.ParticleFactory.drawParticle": "在给定位置绘制给定的粒子",
  "particles.ParticleFactory.drawParticle|param|particle": "@param x",
  "particles.ParticleSource": "粒子的来源",
  "particles.ParticleSource.anchor": "此源所附加的锚点",
  "particles.ParticleSource.clear": "清除从此源发出的所有粒子",
  "particles.ParticleSource.destroy": "摧毁源",
  "particles.ParticleSource.enabled": "设置此源是否当前已启用（发射粒子）",
  "particles.ParticleSource.enabled@set": "设置此源是否当前已启用（发射粒子）",
  "particles.ParticleSource.lifespan": "时间以毫秒为单位。每毫秒\n的寿命减少1，并且当它达到0时源被摧毁。",
  "particles.ParticleSource.priority": "此源优先级的相对排名。\n必要时，具有较低优先级的源将在\n具有较高优先级的源之前被淘汰。",
  "particles.ParticleSource.setAcceleration": "设置应用于粒子的加速度",
  "particles.ParticleSource.setAnchor": "为要发射的粒子设置锚点",
  "particles.ParticleSource.setEnabled": "启用或禁用粒子",
  "particles.ParticleSource.setFactory": "设置粒子系数",
  "particles.ParticleSource.setRate": "设置每秒创建的粒子数",
  "particles.ShapeFactory": "用于创建具有所提供形状的粒子的工厂落在屏幕上。 \n*在提供的形状中分配给0xF（黑色）的任何像素将替换为每个粒子的\n随机颜色。",
  "particles.ShapeFactory.addShape": "为粒子添加另一种可能的形状以显示为",
  "particles.SprayFactory": "用于产生颗粒喷雾的工厂",
  "particles.TrailFactory": "用于创建精灵发出的踪迹的工厂。",
  "particles.cacheCos": "@returns 0到360度之间的缓存cos值数组",
  "particles.cacheCos|param|slices": "要进行的缓存cos值的数量",
  "particles.cacheSin": "@returns 返回0到360度之间的缓存sin值的数组",
  "particles.cacheSin|param|slices": "要缓存的sin值的数量",
  "particles.createParticleSource": "创建附加到精灵的新粒子源",
  "particles.createParticleSource|param|sprite": "@param particlesPerSecond每秒创建的粒子数",
  "particles.disableAll": "停止所有粒子源创建任何新粒子",
  "particles.enableAll": "允许所有粒子源创建任何新粒子",
  "particles|block": "粒子",
  "pause": "暂停以毫秒为单位的指定时间",
  "pause|param|ms": "暂停的时间，例如 100、200、500、1000、2000",
  "pins": "控制模拟/数字信号、伺服机构、i2c 等的引脚中的电流",
  "pins.P0": "端子连接器上的引脚P0",
  "pins.P1": "端子连接器上的引脚P1",
  "pins.P10": "端子连接器上的引脚P10",
  "pins.P11": "端子连接器上的引脚P11",
  "pins.P12": "端子连接器上的引脚P12",
  "pins.P13": "端子连接器上的引脚P13",
  "pins.P14": "端子连接器上的引脚P14",
  "pins.P15": "端子连接器上的引脚P15",
  "pins.P16": "端子连接器上的引脚P16",
  "pins.P19": "端子连接器上的引脚P19",
  "pins.P2": "端子连接器上的引脚P2",
  "pins.P20": "端子连接器上的引脚P20",
  "pins.P3": "端子连接器上的引脚P3",
  "pins.P4": "端子连接器上的引脚P3",
  "pins.P5": "端子连接器上的引脚P5",
  "pins.P6": "端子连接器上的引脚P6",
  "pins.P7": "端子连接器上的引脚P7",
  "pins.P8": "端子连接器上的引脚P8",
  "pins.P9": "端子连接器上的引脚P9",
  "pins.analogReadPin": "读取引脚状态",
  "pins.analogWritePin": "设置数字引脚状态",
  "pins.analogWritePin|param|pin": "@param 值",
  "pins.createBuffer": "新建一个初始化为零的缓冲区。",
  "pins.createBufferFromArray": "创建一个新的缓冲区, 从给定的数组初始化为字节。",
  "pins.createBufferFromArray|param|bytes": "初始化的数据",
  "pins.createBuffer|param|size": "缓冲区中的字节数",
  "pins.createI2C": "打开串行通信驱动",
  "pins.createSPI": "打开 SPI 驱动程序",
  "pins.digitalReadPin": "读取引脚状态",
  "pins.digitalWritePin": "设置数字引脚状态",
  "pins.digitalWritePin|param|pin": "@param 值",
  "pins.i2c": "获取默认的 I2C 总线",
  "pins.i2cReadBuffer": "从一个 7 位 I2C“地址”读取“大小”字节。",
  "pins.i2cReadNumber": "从I2C地址读取一个数字。",
  "pins.i2cReadNumber|block": "i2c读 地址 %address|格式 %format|重复 %repeated",
  "pins.i2cReadRegister": "从I2C寄存器读取值。",
  "pins.i2cReadRegister|block": "i2c 读取寄存器在地址 $addfress在注册 $register",
  "pins.i2cReadRegister|param|address": "设备的I2c地址",
  "pins.i2cReadRegister|param|register": "注册索引",
  "pins.i2cReadRegister|param|valueFormat": "值的格式，默认为UInt8LE",
  "pins.i2cWriteBuffer": "将字节写入一个 7 位 I2C“地址。",
  "pins.i2cWriteNumber": "将一个数字写入I2C地址。",
  "pins.i2cWriteNumber|block": "i2c写|地址 %address|值 %value|格式 %format|重复 %repeated",
  "pins.i2cWriteRegister": "在I2C寄存器中写入值。",
  "pins.i2cWriteRegister|block": "i2c 写入寄存器地址 $address在注册 $register|值 $value",
  "pins.i2cWriteRegister|param|address": "设备的I2c地址",
  "pins.i2cWriteRegister|param|register": "注册索引",
  "pins.i2cWriteRegister|param|value": "要写入的值",
  "pins.i2cWriteRegister|param|valueFormat": "值的格式，默认为UInt8LE",
  "pins.onEvent": "注册 当引脚事件发生时运行的 代码。",
  "pins.onPulsed": "将此引脚设为数字输入，并创建事件，其中时间戳为此引脚为“高”或“低”的持续时间。",
  "pins.pinByCfg": "按配置ID获取引脚（DAL.CFG_PIN...）",
  "pins.pulseDuration": "获取最后一个脉冲的持续时间，以微秒为单位。应该从\n``onPulsed``处理程序调用此函数。",
  "pins.pulseDuration|block": "脉冲持续时间 (µs)",
  "pins.pulseIn": "以微秒为单位返回脉冲的持续时间",
  "pins.pulseIn|param|value": "脉冲值（默认为高）",
  "pins.setPull": "设置引脚上下拉",
  "pins.sizeOf": "获取指定数字格式的字节大小。",
  "pins.spi": "获取默认的 SPI 驱动程序",
  "pins.spiFrequency": "设置 SPI 频率",
  "pins.spiFrequency|block": "spi 频率 %frequency",
  "pins.spiFrequency|param|frequency": "时钟频率，例如 1000000",
  "pins.spiMode": "设置 SPI 模式和位",
  "pins.spiMode|block": "spi模式 %mode",
  "pins.spiMode|param|mode": "模式，例如 3",
  "pins.spiTransfer": "将给定命令写入SPI总线，然后读取响应。",
  "pins.spiTransfer|block": "spi传输 %command 返回 %response",
  "pins.spiWrite": "写入 SPI 从机并返回响应",
  "pins.spiWrite|block": "spi 写入 %value",
  "pins.spiWrite|param|value": "要发送到 SPI 从机的数据",
  "pins|block": "引脚",
  "power": "电源和睡眠管理",
  "power.checkDeepSleep": "检查设备是否有任何“戳”并需要进入深度睡眠模式。",
  "power.checkDeepSleep|block": "电源 检查深度睡眠",
  "power.deepSleep": "将设备置于深度睡眠状态。",
  "power.deepSleep|block": "电源 深度睡眠",
  "power.poke": "戳活动监视器以保持设备清醒。",
  "power.poke|block": "电源 唤醒",
  "power.setDeepSleepTimeout": "设置无活动持续时间，之后设备应进入深度睡眠状态。",
  "power.setDeepSleepTimeout|block": "深度睡眠 时间 %seconds  秒",
  "power.setDeepSleepTimeout|param|seconds": "持续时间（以秒为单位），直到设备进入低功耗模式",
  "power|block": "电源",
  "scene": "控制背景，砖和相机\n\n控制背景，砖和相机",
  "scene.Scene.millis": "获取场景中的已用时间",
  "scene.addBackgroundLayer": "添加移动背景图层",
  "scene.addBackgroundLayer|param|distance": "确定移动速度的层的距离，例如：10",
  "scene.backgroundColor": "获取游戏背景颜色",
  "scene.backgroundColor|block": "背景颜色",
  "scene.backgroundImage": "获取当前背景图片",
  "scene.backgroundImage|block": "背景图片",
  "scene.cameraFollowSprite": "将游戏相机设置为跟随精灵",
  "scene.cameraFollowSprite|block": "镜头跟随精灵 %sprite=variables_get(mySprite)",
  "scene.cameraShake": "摇晃相机",
  "scene.cameraShake|block": "镜头抖动 %amplitude 像素持续 %duration 毫秒",
  "scene.centerCameraAt": "将摄像机中心移动到坐标位置",
  "scene.centerCameraAt|block": "镜头中央设置在x %x y %y",
  "scene.getTile": "将图块放在图块地图中的某个位置",
  "scene.getTilesByType": "使用给定索引获取tile图中的所有tile。",
  "scene.getTilesByType|block": "所有数组 %index=colorindexpicker 图块",
  "scene.getTile|block": "标题列 %col 行 %row",
  "scene.onHitTile": "当某种精灵碰到图块时运行代码",
  "scene.onHitTile|block": "当 $sprite 种类 $kind=spritetype 碰撞墙 $tile=colorindexpicker",
  "scene.placeOnRandomTile": "将给定的精灵置于给定颜色的随机图块上",
  "scene.placeOnRandomTile|block": "放置 %sprite=variables_get(mySprite) 在顶部随机位置 $color tile",
  "scene.screenHeight": "获取屏幕的高度（以像素为单位）",
  "scene.screenHeight|block": "屏幕高度",
  "scene.screenWidth": "以像素为单位获取屏幕宽度",
  "scene.screenWidth|block": "屏幕宽度",
  "scene.setBackgroundColor": "设置游戏背景颜色",
  "scene.setBackgroundColor|block": "设置背景颜色为 %color=colorindexpicker",
  "scene.setBackgroundImage": "将图片设置为背景",
  "scene.setBackgroundImage|block": "设置背景图片为 %img=background_image_picker",
  "scene.setTile": "将图像设置为给定索引处的图块。图块应为16x16图像",
  "scene.setTileAt": "在给定索引处设置图块",
  "scene.setTileAt|block": "设置砖块 %tile=gamegettile 为 %index=colorindexpicker",
  "scene.setTileMap": "设置在场景中放置图块",
  "scene.setTileMap|block": "设置砖块地图 %map=tilemap_image_picker",
  "scene.setTile|block": "设置砖块地图 %index=colorindexpicker 为 %img=screen_image_picker||with wall %wall=toggleOnOff",
  "scene|block": "场景",
  "serial": "通过串行连接读取和写入数据。",
  "serial.attachToConsole": "通过TX，RX引脚发送控制台消息",
  "serial.attachToConsole|block": "串行连接到控制台",
  "serial.createSerial": "创建一个串行通信设备",
  "serial.createSerial|param|tx": "@param rx",
  "serial.internalCreateSerialDevice": "打开串行通信驱动程序",
  "serial.onDelimiterReceived": "收到分隔符时注册代码",
  "serial.onDelimiterReceived|block": "串行以分隔符 $delimiter 收到",
  "serial.onEvent": "在串行事件发生时注册代码",
  "serial.onEvent|block": "串行在 %event",
  "serial.read": "从串行接收缓冲区读取单个字节。如果出现错误, 则为负, 如果没有数据, 则为0。",
  "serial.readBuffer": "将缓冲的接收数据作为缓冲区读取",
  "serial.readBuffer|block": "串行读取缓冲区",
  "serial.readLine": "从串行端口读取一行文本。",
  "serial.readLine|block": "从串口读取行",
  "serial.readString": "以字符串形式读取收到的缓冲数据",
  "serial.readString|block": "从串口读取字符串",
  "serial.readUntil": "从串行端口读取一行文本，并在遇到分隔符时返回缓冲器。",
  "serial.readUntil|block": "从串口读取，直至遇到 %delimiter=serial_delimiter_conv",
  "serial.readUntil|param|delimiter": "分隔每个文本区块的文本分隔符",
  "serial.redirect": "将串行输入和输出设置为使用引脚，而不是 USB 连接。",
  "serial.redirect|block": "串行重定向到|TX %tx|RX %rx 波特率为 %rate",
  "serial.redirect|param|rate": "新的波特率",
  "serial.redirect|param|rx": "新的接收引脚",
  "serial.redirect|param|tx": "新的发送引脚",
  "serial.setBaudRate": "设置串行端口的波特率",
  "serial.setBaudRate|block": "串行设置波特率 %rate",
  "serial.setRxBufferSize": "设置RX缓冲区的大小（以字节为单位）",
  "serial.setRxBufferSize|block": "串行设置 rx 缓冲区大小 $size",
  "serial.setTxBufferSize": "设置TX缓冲区的大小（以字节为单位）",
  "serial.setTxBufferSize|block": "串行集 tx 缓冲区大小 $size",
  "serial.writeBuffer": "通过串行连接发送缓冲区。",
  "serial.writeBuffer|block": "串行|写入缓冲器 %buffer",
  "serial.writeDmesg": "通过串行连接发送 DMESG 调试缓冲区。",
  "serial.writeLine": "将一行文本写入串行端口。",
  "serial.writeLine|block": "向串口写入一行 %text",
  "serial.writeNumber": "写一个数字到串行端口。",
  "serial.writeNumber|block": "串行写入数字 %value",
  "serial.writeString": "将一些文本写入串行端口。",
  "serial.writeString|block": "串行写入字符串 %text",
  "serial.writeValue": "写一个名称：值对作为串行端口的文本行。",
  "serial.writeValue|block": "串行写入数值 %name|= %value",
  "serial.writeValue|param|name": "值流的名称，例如：“x”",
  "serial.writeValue|param|value": "要写入的值",
  "serial|block": "串行",
  "servos.P0|block": "舵机 P0",
  "servos.P1|block": "舵机 P1",
  "servos.P2|block": "舵机 P2",
  "servos.Servo.maxAngle": "获取舵机的最大角度",
  "servos.Servo.minAngle": "获取舵机的最小角度",
  "servos.Servo.run": "将油门设置在连续伺服（360度舵机）上",
  "servos.Servo.run|block": "360度舵机 %servo 运行速度 %speed=speedPicker \\%",
  "servos.Servo.run|param|speed": "电机的油门从-100% 到100%",
  "servos.Servo.setAngle": "设置舵机角度",
  "servos.Servo.setAngle|block": "设置 %servo 角度为 %degrees=protractorPicker °",
  "servos.Servo.setPulse": "以微秒为单位给舵机设置脉冲宽度",
  "servos.Servo.setPulse|block": "设置 %servo 脉冲为 %micros 微秒（μs）",
  "servos.Servo.setPulse|param|micros": "脉冲的宽度 (以微秒为单位)",
  "servos.Servo.setRange": "将舵机的可能旋转范围角度设置在0和180之间",
  "servos.Servo.setRange|block": "设置 %servo 范围从 %minAngle 到 %maxAngle",
  "servos.Servo.setRange|param|maxAngle": "最大角度从90到180",
  "servos.Servo.setRange|param|minAngle": "最小角度从0到90",
  "servos.Servo.setStopOnNeutral": "设置360度舵机停止模式，使其在旋转角度处于中立位置，即90度时停止。",
  "servos.Servo.setStopOnNeutral|block": "设置 %servo 停在中立位 %enabled",
  "servos.Servo.stop": "停止向舵机发送命令，使其旋转停止在当前位置。",
  "servos.Servo.stop|block": "停止 %servo",
  "setImmediate": "尽快调用函数。",
  "setInterval": "在每次调用该函数之间调用一个固定时间延迟的函数。",
  "setInterval|param|func": "@param 延迟",
  "setTimeout": "在指定的延迟后调用函数。",
  "setTimeout|param|func": "@param 延迟",
  "sevenseg": "七段数码管显示和小数点",
  "sevenseg.createCounter": "创建一个七段数码管计数器显示",
  "sevenseg.createCounter|block": "创建计数器|| %thickness 数码管 尺寸%scale，对应 %numDigits 数字",
  "sevenseg.createCounter|param|numDigits": "显示的位数, 例如: 1",
  "sevenseg.createCounter|param|scale": "段的大小，例如：SegmentScale.Full",
  "sevenseg.createCounter|param|thickness": "段的宽度，例如：SegmentStyle.Thick",
  "sevenseg.createDigit": "创建一个七段显示数字",
  "sevenseg.createDigit|block": "创建数码管数字 || %thickness 数值为 %value",
  "sevenseg.createDigit|param|thickness": "段的宽度，例如：SegmentStyle.Thick",
  "sevenseg.createDigit|param|value": "可选的初始显示值，例如：0",
  "sevenseg|block": "七段数码管",
  "sprites": "精灵在屏幕上",
  "sprites.SpriteMap.neighbors": "返回潜在的邻居列表",
  "sprites.SpriteMap.overlaps": "获取重叠的精灵（如果有的话）",
  "sprites.SpriteMap.update": "重新计算所有对象的哈希值",
  "sprites._spriteType": "获取精灵类型",
  "sprites._spriteType|block": "$kind",
  "sprites.allOfKind": "返回给定类型的所有精灵的数组。",
  "sprites.allOfKind|block": "精灵类型列表 %kind=spritetype",
  "sprites.allOfKind|param|kind": "目标种类",
  "sprites.create": "从图像创建一个新的精灵",
  "sprites.createProjectile": "创建一个具有给定速度的新精灵，并将其放置在屏幕的边缘，使其向中间移动。\n精灵在离开屏幕时自动销毁。您可以在创建后修改位置。",
  "sprites.createProjectileFromSide": "创建一个具有给定速度的新精灵，并将其放置在屏幕的边缘，使其向中间移动。\n精灵在离开屏幕时自动销毁。您可以在创建后修改位置。",
  "sprites.createProjectileFromSide|block": "弹射物 %img=screen_image_picker 从边上 | 速度 vx %vx vy %vy",
  "sprites.createProjectileFromSprite": "创建一个具有给定速度的新精灵，并将其放置在屏幕的边缘，使其向中间移动。\n精灵在离开屏幕时自动销毁。您可以在创建后修改位置。",
  "sprites.createProjectileFromSprite|block": "弹射物 %img=screen_image_picker 从 %sprite=variables_get(mySprite) 速度 vx %vx vy %vy",
  "sprites.createProjectile|block": "弹射物 %img=screen_image_picker vx %vx vy %vy 类型 %kind=spritetype || 精灵 %sprite=variables_get(mySprite)",
  "sprites.create|block": "精灵 %img=screen_image_picker 类型 %kind=spritetype",
  "sprites.create|param|img": "图像",
  "sprites.onCreated": "创建某种精灵时运行代码",
  "sprites.onCreated|block": "当精灵创建 $sprite 类型 $kind=spritetype",
  "sprites.onDestroyed": "当某种精灵被破坏时运行代码",
  "sprites.onDestroyed|block": "当精灵销毁 $sprite 类型 $kind=spritetype",
  "sprites.onOverlap": "当两种精灵重叠时运行代码",
  "sprites.onOverlap|block": "当 $sprite 类型 $kind=spritetype 叠在 $otherSprite 类型 $otherKind=spritetype",
  "sprites|block": "精灵",
  "tiles.Tile": "在图块地图的图块",
  "tiles.Tile.place": "将给定的精灵居中放在此图块上",
  "tiles.Tile.place|block": "在砖块 %tile(myTile) 上放置 %sprite=variables_get(mySprite)",
  "tiles|block": "砖块",
  "{id:category}Animation": "动画",
  "{id:category}ArcadePhysicsEngine": "Arcade物理引擎",
  "{id:category}Array": "数组（Array）",
  "{id:category}Arrays": "数组",
  "{id:category}Basic": "基本",
  "{id:category}Boolean": "布尔值",
  "{id:category}Buffer": "缓冲器",
  "{id:category}Button": "按键",
  "{id:category}Config": "配置",
  "{id:category}Console": "控制台",
  "{id:category}Control": "控制",
  "{id:category}Controller": "控制器",
  "{id:category}Corgio": "小狗",
  "{id:category}Dart": "飞镖",
  "{id:category}Darts": "飞镖",
  "{id:category}DigitCounter": "数字计数器",
  "{id:category}DigitalInOutPin": "数字IO引脚",
  "{id:category}Effects": "特效",
  "{id:category}Fx": "Fx",
  "{id:category}Fx8": "Fx8",
  "{id:category}Game": "游戏",
  "{id:category}Helpers": "帮助器",
  "{id:category}I2C": "I2C",
  "{id:category}Image": "图像",
  "{id:category}Images": "图像",
  "{id:category}Info": "游戏信息",
  "{id:category}Input": "输入",
  "{id:category}JSON": "JSON",
  "{id:category}JacDacDriverStatus": "JacDac驱动状态",
  "{id:category}Jacdac": "Jacdac",
  "{id:category}Light": "亮",
  "{id:category}Loops": "循环",
  "{id:category}Math": "数学",
  "{id:category}Msgpack": "信息包",
  "{id:category}Music": "音乐",
  "{id:category}Number": "数値",
  "{id:category}Object": "对象",
  "{id:category}Particles": "粒子",
  "{id:category}PhysicsEngine": "物理引擎",
  "{id:category}Pins": "引脚",
  "{id:category}Power": "电源",
  "{id:category}SPI": "SPI",
  "{id:category}Scene": "场景",
  "{id:category}ScreenImage": "屏幕图像",
  "{id:category}Serial": "串行",
  "{id:category}SerialDevice": "串行设备",
  "{id:category}Servos": "舵机",
  "{id:category}SevenSegDigit": "七段数码管数字",
  "{id:category}Sevenseg": "七段数码管",
  "{id:category}Sprite": "精灵",
  "{id:category}SpriteLike": "精灵类型",
  "{id:category}SpriteSet": "精灵设置",
  "{id:category}Sprites": "精灵",
  "{id:category}String": "字符串",
  "{id:category}Text": "文本",
  "{id:category}Tiles": "砖块",
  "{id:category}UTF8Decoder": "UTF8解码器",
  "{id:category}_helpers_workaround": "_助手_解决办法",
  "{id:category}_screen_internal": "_ 屏幕 _ 内部",
  "{id:group}Accelerometer": "加速计",
  "{id:group}Actions": "操作",
  "{id:group}Broadcast": "广播",
  "{id:group}Buttons": "按钮",
  "{id:group}Camera": "相机",
  "{id:group}Collisions": "碰撞",
  "{id:group}Configuration": "配置",
  "{id:group}Console": "控制台",
  "{id:group}Continuous": "连续",
  "{id:group}Control": "控制",
  "{id:group}Controller": "控制器",
  "{id:group}Countdown": "倒数",
  "{id:group}Counter": "计数器",
  "{id:group}Create": "创建",
  "{id:group}Dialogs": "对话框",
  "{id:group}Digits": "数字",
  "{id:group}Drawing": "绘图",
  "{id:group}Effects": "特效",
  "{id:group}Events": "事件",
  "{id:group}Extras": "扩展插件",
  "{id:group}Gamepad": "游戏手柄",
  "{id:group}Gameplay": "游戏内容",
  "{id:group}Image": "图像",
  "{id:group}Keyboard": "键盘",
  "{id:group}LCD": "液晶",
  "{id:group}Life": "生命",
  "{id:group}Lifecycle": "生命周期",
  "{id:group}Light": "光",
  "{id:group}Light sensor": "光线传感器",
  "{id:group}Microphone": "麦克风",
  "{id:group}More": "更多",
  "{id:group}Mouse": "鼠标",
  "{id:group}Movement": "移动",
  "{id:group}Multiplayer": "多人游戏",
  "{id:group}Music": "音乐",
  "{id:group}Name": "名字",
  "{id:group}Overlaps": "重叠",
  "{id:group}Physics": "物理",
  "{id:group}Pixel": "像素",
  "{id:group}Positional": "位置",
  "{id:group}Projectiles": "弹射物",
  "{id:group}Prompt": "提示(询问)",
  "{id:group}Properties": "属性",
  "{id:group}Read": "读取",
  "{id:group}Score": "得分",
  "{id:group}Screen": "屏幕",
  "{id:group}Services": "服务",
  "{id:group}Servo": "舵机",
  "{id:group}Servos": "舵机",
  "{id:group}Single Player": "单人模式",
  "{id:group}Sounds": "声音",
  "{id:group}Speak": "说话",
  "{id:group}Switch": "轻触开关",
  "{id:group}Tempo": "节拍",
  "{id:group}Theme": "主题",
  "{id:group}Thermometer": "温度计",
  "{id:group}Tiles": "砖块",
  "{id:group}Tone": "音调",
  "{id:group}Touch": "触摸",
  "{id:group}Transformations": "变形",
  "{id:group}Volume": "音量",
  "{id:group}Write": "写",
  "{id:group}i2c": "i2c"
}